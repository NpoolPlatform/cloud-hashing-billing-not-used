// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/goodpayment"
	"github.com/google/uuid"
)

// GoodPayment is the model entity for the GoodPayment schema.
type GoodPayment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// PaymentCoinTypeID holds the value of the "payment_coin_type_id" field.
	PaymentCoinTypeID uuid.UUID `json:"payment_coin_type_id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID uuid.UUID `json:"account_id,omitempty"`
	// Idle holds the value of the "idle" field.
	Idle bool `json:"idle,omitempty"`
	// OccupiedBy holds the value of the "occupied_by" field.
	OccupiedBy string `json:"occupied_by,omitempty"`
	// AvailableAt holds the value of the "available_at" field.
	AvailableAt uint32 `json:"available_at,omitempty"`
	// CollectingTid holds the value of the "collecting_tid" field.
	CollectingTid uuid.UUID `json:"collecting_tid,omitempty"`
	// UsedFor holds the value of the "used_for" field.
	UsedFor string `json:"used_for,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
	// DeleteAt holds the value of the "delete_at" field.
	DeleteAt uint32 `json:"delete_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodPayment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case goodpayment.FieldIdle:
			values[i] = new(sql.NullBool)
		case goodpayment.FieldAvailableAt, goodpayment.FieldCreateAt, goodpayment.FieldUpdateAt, goodpayment.FieldDeleteAt:
			values[i] = new(sql.NullInt64)
		case goodpayment.FieldOccupiedBy, goodpayment.FieldUsedFor:
			values[i] = new(sql.NullString)
		case goodpayment.FieldID, goodpayment.FieldGoodID, goodpayment.FieldPaymentCoinTypeID, goodpayment.FieldAccountID, goodpayment.FieldCollectingTid:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodPayment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodPayment fields.
func (gp *GoodPayment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goodpayment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gp.ID = *value
			}
		case goodpayment.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				gp.GoodID = *value
			}
		case goodpayment.FieldPaymentCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field payment_coin_type_id", values[i])
			} else if value != nil {
				gp.PaymentCoinTypeID = *value
			}
		case goodpayment.FieldAccountID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value != nil {
				gp.AccountID = *value
			}
		case goodpayment.FieldIdle:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field idle", values[i])
			} else if value.Valid {
				gp.Idle = value.Bool
			}
		case goodpayment.FieldOccupiedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field occupied_by", values[i])
			} else if value.Valid {
				gp.OccupiedBy = value.String
			}
		case goodpayment.FieldAvailableAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field available_at", values[i])
			} else if value.Valid {
				gp.AvailableAt = uint32(value.Int64)
			}
		case goodpayment.FieldCollectingTid:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field collecting_tid", values[i])
			} else if value != nil {
				gp.CollectingTid = *value
			}
		case goodpayment.FieldUsedFor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field used_for", values[i])
			} else if value.Valid {
				gp.UsedFor = value.String
			}
		case goodpayment.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				gp.CreateAt = uint32(value.Int64)
			}
		case goodpayment.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				gp.UpdateAt = uint32(value.Int64)
			}
		case goodpayment.FieldDeleteAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field delete_at", values[i])
			} else if value.Valid {
				gp.DeleteAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GoodPayment.
// Note that you need to call GoodPayment.Unwrap() before calling this method if this GoodPayment
// was returned from a transaction, and the transaction was committed or rolled back.
func (gp *GoodPayment) Update() *GoodPaymentUpdateOne {
	return (&GoodPaymentClient{config: gp.config}).UpdateOne(gp)
}

// Unwrap unwraps the GoodPayment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gp *GoodPayment) Unwrap() *GoodPayment {
	_tx, ok := gp.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodPayment is not a transactional entity")
	}
	gp.config.driver = _tx.drv
	return gp
}

// String implements the fmt.Stringer.
func (gp *GoodPayment) String() string {
	var builder strings.Builder
	builder.WriteString("GoodPayment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gp.ID))
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", gp.GoodID))
	builder.WriteString(", ")
	builder.WriteString("payment_coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", gp.PaymentCoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", gp.AccountID))
	builder.WriteString(", ")
	builder.WriteString("idle=")
	builder.WriteString(fmt.Sprintf("%v", gp.Idle))
	builder.WriteString(", ")
	builder.WriteString("occupied_by=")
	builder.WriteString(gp.OccupiedBy)
	builder.WriteString(", ")
	builder.WriteString("available_at=")
	builder.WriteString(fmt.Sprintf("%v", gp.AvailableAt))
	builder.WriteString(", ")
	builder.WriteString("collecting_tid=")
	builder.WriteString(fmt.Sprintf("%v", gp.CollectingTid))
	builder.WriteString(", ")
	builder.WriteString("used_for=")
	builder.WriteString(gp.UsedFor)
	builder.WriteString(", ")
	builder.WriteString("create_at=")
	builder.WriteString(fmt.Sprintf("%v", gp.CreateAt))
	builder.WriteString(", ")
	builder.WriteString("update_at=")
	builder.WriteString(fmt.Sprintf("%v", gp.UpdateAt))
	builder.WriteString(", ")
	builder.WriteString("delete_at=")
	builder.WriteString(fmt.Sprintf("%v", gp.DeleteAt))
	builder.WriteByte(')')
	return builder.String()
}

// GoodPayments is a parsable slice of GoodPayment.
type GoodPayments []*GoodPayment

func (gp GoodPayments) config(cfg config) {
	for _i := range gp {
		gp[_i].config = cfg
	}
}
