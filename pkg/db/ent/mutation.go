// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/appwithdrawsetting"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/coinaccountinfo"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/coinaccounttransaction"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/coinsetting"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/goodbenefit"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/goodpayment"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/platformbenefit"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/platformsetting"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/userbenefit"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/userdirectbenefit"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/userpaymentbalance"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/userwithdraw"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/userwithdrawitem"
	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAppWithdrawSetting     = "AppWithdrawSetting"
	TypeCoinAccountInfo        = "CoinAccountInfo"
	TypeCoinAccountTransaction = "CoinAccountTransaction"
	TypeCoinSetting            = "CoinSetting"
	TypeGoodBenefit            = "GoodBenefit"
	TypeGoodPayment            = "GoodPayment"
	TypePlatformBenefit        = "PlatformBenefit"
	TypePlatformSetting        = "PlatformSetting"
	TypeUserBenefit            = "UserBenefit"
	TypeUserDirectBenefit      = "UserDirectBenefit"
	TypeUserPaymentBalance     = "UserPaymentBalance"
	TypeUserWithdraw           = "UserWithdraw"
	TypeUserWithdrawItem       = "UserWithdrawItem"
)

// AppWithdrawSettingMutation represents an operation that mutates the AppWithdrawSetting nodes in the graph.
type AppWithdrawSettingMutation struct {
	config
	op                                  Op
	typ                                 string
	id                                  *uuid.UUID
	app_id                              *uuid.UUID
	coin_type_id                        *uuid.UUID
	withdraw_auto_review_coin_amount    *uint64
	addwithdraw_auto_review_coin_amount *int64
	create_at                           *uint32
	addcreate_at                        *int32
	update_at                           *uint32
	addupdate_at                        *int32
	delete_at                           *uint32
	adddelete_at                        *int32
	clearedFields                       map[string]struct{}
	done                                bool
	oldValue                            func(context.Context) (*AppWithdrawSetting, error)
	predicates                          []predicate.AppWithdrawSetting
}

var _ ent.Mutation = (*AppWithdrawSettingMutation)(nil)

// appwithdrawsettingOption allows management of the mutation configuration using functional options.
type appwithdrawsettingOption func(*AppWithdrawSettingMutation)

// newAppWithdrawSettingMutation creates new mutation for the AppWithdrawSetting entity.
func newAppWithdrawSettingMutation(c config, op Op, opts ...appwithdrawsettingOption) *AppWithdrawSettingMutation {
	m := &AppWithdrawSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeAppWithdrawSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAppWithdrawSettingID sets the ID field of the mutation.
func withAppWithdrawSettingID(id uuid.UUID) appwithdrawsettingOption {
	return func(m *AppWithdrawSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *AppWithdrawSetting
		)
		m.oldValue = func(ctx context.Context) (*AppWithdrawSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AppWithdrawSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAppWithdrawSetting sets the old AppWithdrawSetting of the mutation.
func withAppWithdrawSetting(node *AppWithdrawSetting) appwithdrawsettingOption {
	return func(m *AppWithdrawSettingMutation) {
		m.oldValue = func(context.Context) (*AppWithdrawSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AppWithdrawSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AppWithdrawSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AppWithdrawSetting entities.
func (m *AppWithdrawSettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AppWithdrawSettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AppWithdrawSettingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AppWithdrawSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *AppWithdrawSettingMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AppWithdrawSettingMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AppWithdrawSetting entity.
// If the AppWithdrawSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppWithdrawSettingMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AppWithdrawSettingMutation) ResetAppID() {
	m.app_id = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *AppWithdrawSettingMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *AppWithdrawSettingMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the AppWithdrawSetting entity.
// If the AppWithdrawSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppWithdrawSettingMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *AppWithdrawSettingMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
}

// SetWithdrawAutoReviewCoinAmount sets the "withdraw_auto_review_coin_amount" field.
func (m *AppWithdrawSettingMutation) SetWithdrawAutoReviewCoinAmount(u uint64) {
	m.withdraw_auto_review_coin_amount = &u
	m.addwithdraw_auto_review_coin_amount = nil
}

// WithdrawAutoReviewCoinAmount returns the value of the "withdraw_auto_review_coin_amount" field in the mutation.
func (m *AppWithdrawSettingMutation) WithdrawAutoReviewCoinAmount() (r uint64, exists bool) {
	v := m.withdraw_auto_review_coin_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldWithdrawAutoReviewCoinAmount returns the old "withdraw_auto_review_coin_amount" field's value of the AppWithdrawSetting entity.
// If the AppWithdrawSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppWithdrawSettingMutation) OldWithdrawAutoReviewCoinAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWithdrawAutoReviewCoinAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWithdrawAutoReviewCoinAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWithdrawAutoReviewCoinAmount: %w", err)
	}
	return oldValue.WithdrawAutoReviewCoinAmount, nil
}

// AddWithdrawAutoReviewCoinAmount adds u to the "withdraw_auto_review_coin_amount" field.
func (m *AppWithdrawSettingMutation) AddWithdrawAutoReviewCoinAmount(u int64) {
	if m.addwithdraw_auto_review_coin_amount != nil {
		*m.addwithdraw_auto_review_coin_amount += u
	} else {
		m.addwithdraw_auto_review_coin_amount = &u
	}
}

// AddedWithdrawAutoReviewCoinAmount returns the value that was added to the "withdraw_auto_review_coin_amount" field in this mutation.
func (m *AppWithdrawSettingMutation) AddedWithdrawAutoReviewCoinAmount() (r int64, exists bool) {
	v := m.addwithdraw_auto_review_coin_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetWithdrawAutoReviewCoinAmount resets all changes to the "withdraw_auto_review_coin_amount" field.
func (m *AppWithdrawSettingMutation) ResetWithdrawAutoReviewCoinAmount() {
	m.withdraw_auto_review_coin_amount = nil
	m.addwithdraw_auto_review_coin_amount = nil
}

// SetCreateAt sets the "create_at" field.
func (m *AppWithdrawSettingMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *AppWithdrawSettingMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the AppWithdrawSetting entity.
// If the AppWithdrawSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppWithdrawSettingMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *AppWithdrawSettingMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *AppWithdrawSettingMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *AppWithdrawSettingMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *AppWithdrawSettingMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *AppWithdrawSettingMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the AppWithdrawSetting entity.
// If the AppWithdrawSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppWithdrawSettingMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *AppWithdrawSettingMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *AppWithdrawSettingMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *AppWithdrawSettingMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *AppWithdrawSettingMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *AppWithdrawSettingMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the AppWithdrawSetting entity.
// If the AppWithdrawSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AppWithdrawSettingMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *AppWithdrawSettingMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *AppWithdrawSettingMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *AppWithdrawSettingMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the AppWithdrawSettingMutation builder.
func (m *AppWithdrawSettingMutation) Where(ps ...predicate.AppWithdrawSetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AppWithdrawSettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AppWithdrawSetting).
func (m *AppWithdrawSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AppWithdrawSettingMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.app_id != nil {
		fields = append(fields, appwithdrawsetting.FieldAppID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, appwithdrawsetting.FieldCoinTypeID)
	}
	if m.withdraw_auto_review_coin_amount != nil {
		fields = append(fields, appwithdrawsetting.FieldWithdrawAutoReviewCoinAmount)
	}
	if m.create_at != nil {
		fields = append(fields, appwithdrawsetting.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, appwithdrawsetting.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, appwithdrawsetting.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AppWithdrawSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case appwithdrawsetting.FieldAppID:
		return m.AppID()
	case appwithdrawsetting.FieldCoinTypeID:
		return m.CoinTypeID()
	case appwithdrawsetting.FieldWithdrawAutoReviewCoinAmount:
		return m.WithdrawAutoReviewCoinAmount()
	case appwithdrawsetting.FieldCreateAt:
		return m.CreateAt()
	case appwithdrawsetting.FieldUpdateAt:
		return m.UpdateAt()
	case appwithdrawsetting.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AppWithdrawSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case appwithdrawsetting.FieldAppID:
		return m.OldAppID(ctx)
	case appwithdrawsetting.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case appwithdrawsetting.FieldWithdrawAutoReviewCoinAmount:
		return m.OldWithdrawAutoReviewCoinAmount(ctx)
	case appwithdrawsetting.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case appwithdrawsetting.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case appwithdrawsetting.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown AppWithdrawSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppWithdrawSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case appwithdrawsetting.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case appwithdrawsetting.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case appwithdrawsetting.FieldWithdrawAutoReviewCoinAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWithdrawAutoReviewCoinAmount(v)
		return nil
	case appwithdrawsetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case appwithdrawsetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case appwithdrawsetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppWithdrawSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AppWithdrawSettingMutation) AddedFields() []string {
	var fields []string
	if m.addwithdraw_auto_review_coin_amount != nil {
		fields = append(fields, appwithdrawsetting.FieldWithdrawAutoReviewCoinAmount)
	}
	if m.addcreate_at != nil {
		fields = append(fields, appwithdrawsetting.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, appwithdrawsetting.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, appwithdrawsetting.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AppWithdrawSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case appwithdrawsetting.FieldWithdrawAutoReviewCoinAmount:
		return m.AddedWithdrawAutoReviewCoinAmount()
	case appwithdrawsetting.FieldCreateAt:
		return m.AddedCreateAt()
	case appwithdrawsetting.FieldUpdateAt:
		return m.AddedUpdateAt()
	case appwithdrawsetting.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AppWithdrawSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case appwithdrawsetting.FieldWithdrawAutoReviewCoinAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWithdrawAutoReviewCoinAmount(v)
		return nil
	case appwithdrawsetting.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case appwithdrawsetting.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case appwithdrawsetting.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown AppWithdrawSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AppWithdrawSettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AppWithdrawSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AppWithdrawSettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AppWithdrawSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AppWithdrawSettingMutation) ResetField(name string) error {
	switch name {
	case appwithdrawsetting.FieldAppID:
		m.ResetAppID()
		return nil
	case appwithdrawsetting.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case appwithdrawsetting.FieldWithdrawAutoReviewCoinAmount:
		m.ResetWithdrawAutoReviewCoinAmount()
		return nil
	case appwithdrawsetting.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case appwithdrawsetting.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case appwithdrawsetting.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown AppWithdrawSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AppWithdrawSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AppWithdrawSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AppWithdrawSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AppWithdrawSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AppWithdrawSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AppWithdrawSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AppWithdrawSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AppWithdrawSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AppWithdrawSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AppWithdrawSetting edge %s", name)
}

// CoinAccountInfoMutation represents an operation that mutates the CoinAccountInfo nodes in the graph.
type CoinAccountInfoMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	coin_type_id              *uuid.UUID
	address                   *string
	platform_hold_private_key *bool
	create_at                 *uint32
	addcreate_at              *int32
	update_at                 *uint32
	addupdate_at              *int32
	delete_at                 *uint32
	adddelete_at              *int32
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*CoinAccountInfo, error)
	predicates                []predicate.CoinAccountInfo
}

var _ ent.Mutation = (*CoinAccountInfoMutation)(nil)

// coinaccountinfoOption allows management of the mutation configuration using functional options.
type coinaccountinfoOption func(*CoinAccountInfoMutation)

// newCoinAccountInfoMutation creates new mutation for the CoinAccountInfo entity.
func newCoinAccountInfoMutation(c config, op Op, opts ...coinaccountinfoOption) *CoinAccountInfoMutation {
	m := &CoinAccountInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeCoinAccountInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoinAccountInfoID sets the ID field of the mutation.
func withCoinAccountInfoID(id uuid.UUID) coinaccountinfoOption {
	return func(m *CoinAccountInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *CoinAccountInfo
		)
		m.oldValue = func(ctx context.Context) (*CoinAccountInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoinAccountInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoinAccountInfo sets the old CoinAccountInfo of the mutation.
func withCoinAccountInfo(node *CoinAccountInfo) coinaccountinfoOption {
	return func(m *CoinAccountInfoMutation) {
		m.oldValue = func(context.Context) (*CoinAccountInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoinAccountInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoinAccountInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CoinAccountInfo entities.
func (m *CoinAccountInfoMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoinAccountInfoMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoinAccountInfoMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CoinAccountInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *CoinAccountInfoMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *CoinAccountInfoMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the CoinAccountInfo entity.
// If the CoinAccountInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountInfoMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *CoinAccountInfoMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
}

// SetAddress sets the "address" field.
func (m *CoinAccountInfoMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *CoinAccountInfoMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the CoinAccountInfo entity.
// If the CoinAccountInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountInfoMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *CoinAccountInfoMutation) ResetAddress() {
	m.address = nil
}

// SetPlatformHoldPrivateKey sets the "platform_hold_private_key" field.
func (m *CoinAccountInfoMutation) SetPlatformHoldPrivateKey(b bool) {
	m.platform_hold_private_key = &b
}

// PlatformHoldPrivateKey returns the value of the "platform_hold_private_key" field in the mutation.
func (m *CoinAccountInfoMutation) PlatformHoldPrivateKey() (r bool, exists bool) {
	v := m.platform_hold_private_key
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatformHoldPrivateKey returns the old "platform_hold_private_key" field's value of the CoinAccountInfo entity.
// If the CoinAccountInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountInfoMutation) OldPlatformHoldPrivateKey(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatformHoldPrivateKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatformHoldPrivateKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatformHoldPrivateKey: %w", err)
	}
	return oldValue.PlatformHoldPrivateKey, nil
}

// ResetPlatformHoldPrivateKey resets all changes to the "platform_hold_private_key" field.
func (m *CoinAccountInfoMutation) ResetPlatformHoldPrivateKey() {
	m.platform_hold_private_key = nil
}

// SetCreateAt sets the "create_at" field.
func (m *CoinAccountInfoMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *CoinAccountInfoMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the CoinAccountInfo entity.
// If the CoinAccountInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountInfoMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *CoinAccountInfoMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *CoinAccountInfoMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *CoinAccountInfoMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *CoinAccountInfoMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *CoinAccountInfoMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the CoinAccountInfo entity.
// If the CoinAccountInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountInfoMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *CoinAccountInfoMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *CoinAccountInfoMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *CoinAccountInfoMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *CoinAccountInfoMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *CoinAccountInfoMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the CoinAccountInfo entity.
// If the CoinAccountInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountInfoMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *CoinAccountInfoMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *CoinAccountInfoMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *CoinAccountInfoMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the CoinAccountInfoMutation builder.
func (m *CoinAccountInfoMutation) Where(ps ...predicate.CoinAccountInfo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CoinAccountInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CoinAccountInfo).
func (m *CoinAccountInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoinAccountInfoMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.coin_type_id != nil {
		fields = append(fields, coinaccountinfo.FieldCoinTypeID)
	}
	if m.address != nil {
		fields = append(fields, coinaccountinfo.FieldAddress)
	}
	if m.platform_hold_private_key != nil {
		fields = append(fields, coinaccountinfo.FieldPlatformHoldPrivateKey)
	}
	if m.create_at != nil {
		fields = append(fields, coinaccountinfo.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, coinaccountinfo.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, coinaccountinfo.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoinAccountInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coinaccountinfo.FieldCoinTypeID:
		return m.CoinTypeID()
	case coinaccountinfo.FieldAddress:
		return m.Address()
	case coinaccountinfo.FieldPlatformHoldPrivateKey:
		return m.PlatformHoldPrivateKey()
	case coinaccountinfo.FieldCreateAt:
		return m.CreateAt()
	case coinaccountinfo.FieldUpdateAt:
		return m.UpdateAt()
	case coinaccountinfo.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoinAccountInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coinaccountinfo.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case coinaccountinfo.FieldAddress:
		return m.OldAddress(ctx)
	case coinaccountinfo.FieldPlatformHoldPrivateKey:
		return m.OldPlatformHoldPrivateKey(ctx)
	case coinaccountinfo.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case coinaccountinfo.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case coinaccountinfo.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown CoinAccountInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinAccountInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coinaccountinfo.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case coinaccountinfo.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case coinaccountinfo.FieldPlatformHoldPrivateKey:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatformHoldPrivateKey(v)
		return nil
	case coinaccountinfo.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case coinaccountinfo.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case coinaccountinfo.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoinAccountInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoinAccountInfoMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, coinaccountinfo.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, coinaccountinfo.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, coinaccountinfo.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoinAccountInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coinaccountinfo.FieldCreateAt:
		return m.AddedCreateAt()
	case coinaccountinfo.FieldUpdateAt:
		return m.AddedUpdateAt()
	case coinaccountinfo.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinAccountInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coinaccountinfo.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case coinaccountinfo.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case coinaccountinfo.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoinAccountInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoinAccountInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoinAccountInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoinAccountInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CoinAccountInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoinAccountInfoMutation) ResetField(name string) error {
	switch name {
	case coinaccountinfo.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case coinaccountinfo.FieldAddress:
		m.ResetAddress()
		return nil
	case coinaccountinfo.FieldPlatformHoldPrivateKey:
		m.ResetPlatformHoldPrivateKey()
		return nil
	case coinaccountinfo.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case coinaccountinfo.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case coinaccountinfo.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown CoinAccountInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoinAccountInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoinAccountInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoinAccountInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoinAccountInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoinAccountInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoinAccountInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoinAccountInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CoinAccountInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoinAccountInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CoinAccountInfo edge %s", name)
}

// CoinAccountTransactionMutation represents an operation that mutates the CoinAccountTransaction nodes in the graph.
type CoinAccountTransactionMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	app_id               *uuid.UUID
	user_id              *uuid.UUID
	good_id              *uuid.UUID
	from_address_id      *uuid.UUID
	to_address_id        *uuid.UUID
	coin_type_id         *uuid.UUID
	amount               *uint64
	addamount            *int64
	transaction_fee      *uint64
	addtransaction_fee   *int64
	message              *string
	state                *coinaccounttransaction.State
	chain_transaction_id *string
	fail_hold            *bool
	created_for          *string
	create_at            *uint32
	addcreate_at         *int32
	update_at            *uint32
	addupdate_at         *int32
	delete_at            *uint32
	adddelete_at         *int32
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*CoinAccountTransaction, error)
	predicates           []predicate.CoinAccountTransaction
}

var _ ent.Mutation = (*CoinAccountTransactionMutation)(nil)

// coinaccounttransactionOption allows management of the mutation configuration using functional options.
type coinaccounttransactionOption func(*CoinAccountTransactionMutation)

// newCoinAccountTransactionMutation creates new mutation for the CoinAccountTransaction entity.
func newCoinAccountTransactionMutation(c config, op Op, opts ...coinaccounttransactionOption) *CoinAccountTransactionMutation {
	m := &CoinAccountTransactionMutation{
		config:        c,
		op:            op,
		typ:           TypeCoinAccountTransaction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoinAccountTransactionID sets the ID field of the mutation.
func withCoinAccountTransactionID(id uuid.UUID) coinaccounttransactionOption {
	return func(m *CoinAccountTransactionMutation) {
		var (
			err   error
			once  sync.Once
			value *CoinAccountTransaction
		)
		m.oldValue = func(ctx context.Context) (*CoinAccountTransaction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoinAccountTransaction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoinAccountTransaction sets the old CoinAccountTransaction of the mutation.
func withCoinAccountTransaction(node *CoinAccountTransaction) coinaccounttransactionOption {
	return func(m *CoinAccountTransactionMutation) {
		m.oldValue = func(context.Context) (*CoinAccountTransaction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoinAccountTransactionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoinAccountTransactionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CoinAccountTransaction entities.
func (m *CoinAccountTransactionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoinAccountTransactionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoinAccountTransactionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CoinAccountTransaction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *CoinAccountTransactionMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *CoinAccountTransactionMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *CoinAccountTransactionMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *CoinAccountTransactionMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CoinAccountTransactionMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CoinAccountTransactionMutation) ResetUserID() {
	m.user_id = nil
}

// SetGoodID sets the "good_id" field.
func (m *CoinAccountTransactionMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *CoinAccountTransactionMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *CoinAccountTransactionMutation) ResetGoodID() {
	m.good_id = nil
}

// SetFromAddressID sets the "from_address_id" field.
func (m *CoinAccountTransactionMutation) SetFromAddressID(u uuid.UUID) {
	m.from_address_id = &u
}

// FromAddressID returns the value of the "from_address_id" field in the mutation.
func (m *CoinAccountTransactionMutation) FromAddressID() (r uuid.UUID, exists bool) {
	v := m.from_address_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFromAddressID returns the old "from_address_id" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldFromAddressID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFromAddressID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFromAddressID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFromAddressID: %w", err)
	}
	return oldValue.FromAddressID, nil
}

// ResetFromAddressID resets all changes to the "from_address_id" field.
func (m *CoinAccountTransactionMutation) ResetFromAddressID() {
	m.from_address_id = nil
}

// SetToAddressID sets the "to_address_id" field.
func (m *CoinAccountTransactionMutation) SetToAddressID(u uuid.UUID) {
	m.to_address_id = &u
}

// ToAddressID returns the value of the "to_address_id" field in the mutation.
func (m *CoinAccountTransactionMutation) ToAddressID() (r uuid.UUID, exists bool) {
	v := m.to_address_id
	if v == nil {
		return
	}
	return *v, true
}

// OldToAddressID returns the old "to_address_id" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldToAddressID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToAddressID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToAddressID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToAddressID: %w", err)
	}
	return oldValue.ToAddressID, nil
}

// ResetToAddressID resets all changes to the "to_address_id" field.
func (m *CoinAccountTransactionMutation) ResetToAddressID() {
	m.to_address_id = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *CoinAccountTransactionMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *CoinAccountTransactionMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *CoinAccountTransactionMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
}

// SetAmount sets the "amount" field.
func (m *CoinAccountTransactionMutation) SetAmount(u uint64) {
	m.amount = &u
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *CoinAccountTransactionMutation) Amount() (r uint64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds u to the "amount" field.
func (m *CoinAccountTransactionMutation) AddAmount(u int64) {
	if m.addamount != nil {
		*m.addamount += u
	} else {
		m.addamount = &u
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *CoinAccountTransactionMutation) AddedAmount() (r int64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *CoinAccountTransactionMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetTransactionFee sets the "transaction_fee" field.
func (m *CoinAccountTransactionMutation) SetTransactionFee(u uint64) {
	m.transaction_fee = &u
	m.addtransaction_fee = nil
}

// TransactionFee returns the value of the "transaction_fee" field in the mutation.
func (m *CoinAccountTransactionMutation) TransactionFee() (r uint64, exists bool) {
	v := m.transaction_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionFee returns the old "transaction_fee" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldTransactionFee(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionFee: %w", err)
	}
	return oldValue.TransactionFee, nil
}

// AddTransactionFee adds u to the "transaction_fee" field.
func (m *CoinAccountTransactionMutation) AddTransactionFee(u int64) {
	if m.addtransaction_fee != nil {
		*m.addtransaction_fee += u
	} else {
		m.addtransaction_fee = &u
	}
}

// AddedTransactionFee returns the value that was added to the "transaction_fee" field in this mutation.
func (m *CoinAccountTransactionMutation) AddedTransactionFee() (r int64, exists bool) {
	v := m.addtransaction_fee
	if v == nil {
		return
	}
	return *v, true
}

// ResetTransactionFee resets all changes to the "transaction_fee" field.
func (m *CoinAccountTransactionMutation) ResetTransactionFee() {
	m.transaction_fee = nil
	m.addtransaction_fee = nil
}

// SetMessage sets the "message" field.
func (m *CoinAccountTransactionMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *CoinAccountTransactionMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *CoinAccountTransactionMutation) ResetMessage() {
	m.message = nil
}

// SetState sets the "state" field.
func (m *CoinAccountTransactionMutation) SetState(c coinaccounttransaction.State) {
	m.state = &c
}

// State returns the value of the "state" field in the mutation.
func (m *CoinAccountTransactionMutation) State() (r coinaccounttransaction.State, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldState(ctx context.Context) (v coinaccounttransaction.State, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *CoinAccountTransactionMutation) ResetState() {
	m.state = nil
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (m *CoinAccountTransactionMutation) SetChainTransactionID(s string) {
	m.chain_transaction_id = &s
}

// ChainTransactionID returns the value of the "chain_transaction_id" field in the mutation.
func (m *CoinAccountTransactionMutation) ChainTransactionID() (r string, exists bool) {
	v := m.chain_transaction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChainTransactionID returns the old "chain_transaction_id" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldChainTransactionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainTransactionID: %w", err)
	}
	return oldValue.ChainTransactionID, nil
}

// ResetChainTransactionID resets all changes to the "chain_transaction_id" field.
func (m *CoinAccountTransactionMutation) ResetChainTransactionID() {
	m.chain_transaction_id = nil
}

// SetFailHold sets the "fail_hold" field.
func (m *CoinAccountTransactionMutation) SetFailHold(b bool) {
	m.fail_hold = &b
}

// FailHold returns the value of the "fail_hold" field in the mutation.
func (m *CoinAccountTransactionMutation) FailHold() (r bool, exists bool) {
	v := m.fail_hold
	if v == nil {
		return
	}
	return *v, true
}

// OldFailHold returns the old "fail_hold" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldFailHold(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFailHold is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFailHold requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFailHold: %w", err)
	}
	return oldValue.FailHold, nil
}

// ResetFailHold resets all changes to the "fail_hold" field.
func (m *CoinAccountTransactionMutation) ResetFailHold() {
	m.fail_hold = nil
}

// SetCreatedFor sets the "created_for" field.
func (m *CoinAccountTransactionMutation) SetCreatedFor(s string) {
	m.created_for = &s
}

// CreatedFor returns the value of the "created_for" field in the mutation.
func (m *CoinAccountTransactionMutation) CreatedFor() (r string, exists bool) {
	v := m.created_for
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedFor returns the old "created_for" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldCreatedFor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedFor: %w", err)
	}
	return oldValue.CreatedFor, nil
}

// ResetCreatedFor resets all changes to the "created_for" field.
func (m *CoinAccountTransactionMutation) ResetCreatedFor() {
	m.created_for = nil
}

// SetCreateAt sets the "create_at" field.
func (m *CoinAccountTransactionMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *CoinAccountTransactionMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *CoinAccountTransactionMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *CoinAccountTransactionMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *CoinAccountTransactionMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *CoinAccountTransactionMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *CoinAccountTransactionMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *CoinAccountTransactionMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *CoinAccountTransactionMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *CoinAccountTransactionMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *CoinAccountTransactionMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *CoinAccountTransactionMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the CoinAccountTransaction entity.
// If the CoinAccountTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinAccountTransactionMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *CoinAccountTransactionMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *CoinAccountTransactionMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *CoinAccountTransactionMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the CoinAccountTransactionMutation builder.
func (m *CoinAccountTransactionMutation) Where(ps ...predicate.CoinAccountTransaction) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CoinAccountTransactionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CoinAccountTransaction).
func (m *CoinAccountTransactionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoinAccountTransactionMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.app_id != nil {
		fields = append(fields, coinaccounttransaction.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, coinaccounttransaction.FieldUserID)
	}
	if m.good_id != nil {
		fields = append(fields, coinaccounttransaction.FieldGoodID)
	}
	if m.from_address_id != nil {
		fields = append(fields, coinaccounttransaction.FieldFromAddressID)
	}
	if m.to_address_id != nil {
		fields = append(fields, coinaccounttransaction.FieldToAddressID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, coinaccounttransaction.FieldCoinTypeID)
	}
	if m.amount != nil {
		fields = append(fields, coinaccounttransaction.FieldAmount)
	}
	if m.transaction_fee != nil {
		fields = append(fields, coinaccounttransaction.FieldTransactionFee)
	}
	if m.message != nil {
		fields = append(fields, coinaccounttransaction.FieldMessage)
	}
	if m.state != nil {
		fields = append(fields, coinaccounttransaction.FieldState)
	}
	if m.chain_transaction_id != nil {
		fields = append(fields, coinaccounttransaction.FieldChainTransactionID)
	}
	if m.fail_hold != nil {
		fields = append(fields, coinaccounttransaction.FieldFailHold)
	}
	if m.created_for != nil {
		fields = append(fields, coinaccounttransaction.FieldCreatedFor)
	}
	if m.create_at != nil {
		fields = append(fields, coinaccounttransaction.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, coinaccounttransaction.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, coinaccounttransaction.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoinAccountTransactionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coinaccounttransaction.FieldAppID:
		return m.AppID()
	case coinaccounttransaction.FieldUserID:
		return m.UserID()
	case coinaccounttransaction.FieldGoodID:
		return m.GoodID()
	case coinaccounttransaction.FieldFromAddressID:
		return m.FromAddressID()
	case coinaccounttransaction.FieldToAddressID:
		return m.ToAddressID()
	case coinaccounttransaction.FieldCoinTypeID:
		return m.CoinTypeID()
	case coinaccounttransaction.FieldAmount:
		return m.Amount()
	case coinaccounttransaction.FieldTransactionFee:
		return m.TransactionFee()
	case coinaccounttransaction.FieldMessage:
		return m.Message()
	case coinaccounttransaction.FieldState:
		return m.State()
	case coinaccounttransaction.FieldChainTransactionID:
		return m.ChainTransactionID()
	case coinaccounttransaction.FieldFailHold:
		return m.FailHold()
	case coinaccounttransaction.FieldCreatedFor:
		return m.CreatedFor()
	case coinaccounttransaction.FieldCreateAt:
		return m.CreateAt()
	case coinaccounttransaction.FieldUpdateAt:
		return m.UpdateAt()
	case coinaccounttransaction.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoinAccountTransactionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coinaccounttransaction.FieldAppID:
		return m.OldAppID(ctx)
	case coinaccounttransaction.FieldUserID:
		return m.OldUserID(ctx)
	case coinaccounttransaction.FieldGoodID:
		return m.OldGoodID(ctx)
	case coinaccounttransaction.FieldFromAddressID:
		return m.OldFromAddressID(ctx)
	case coinaccounttransaction.FieldToAddressID:
		return m.OldToAddressID(ctx)
	case coinaccounttransaction.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case coinaccounttransaction.FieldAmount:
		return m.OldAmount(ctx)
	case coinaccounttransaction.FieldTransactionFee:
		return m.OldTransactionFee(ctx)
	case coinaccounttransaction.FieldMessage:
		return m.OldMessage(ctx)
	case coinaccounttransaction.FieldState:
		return m.OldState(ctx)
	case coinaccounttransaction.FieldChainTransactionID:
		return m.OldChainTransactionID(ctx)
	case coinaccounttransaction.FieldFailHold:
		return m.OldFailHold(ctx)
	case coinaccounttransaction.FieldCreatedFor:
		return m.OldCreatedFor(ctx)
	case coinaccounttransaction.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case coinaccounttransaction.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case coinaccounttransaction.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown CoinAccountTransaction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinAccountTransactionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coinaccounttransaction.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case coinaccounttransaction.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case coinaccounttransaction.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case coinaccounttransaction.FieldFromAddressID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFromAddressID(v)
		return nil
	case coinaccounttransaction.FieldToAddressID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToAddressID(v)
		return nil
	case coinaccounttransaction.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case coinaccounttransaction.FieldAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case coinaccounttransaction.FieldTransactionFee:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionFee(v)
		return nil
	case coinaccounttransaction.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case coinaccounttransaction.FieldState:
		v, ok := value.(coinaccounttransaction.State)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case coinaccounttransaction.FieldChainTransactionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainTransactionID(v)
		return nil
	case coinaccounttransaction.FieldFailHold:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFailHold(v)
		return nil
	case coinaccounttransaction.FieldCreatedFor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedFor(v)
		return nil
	case coinaccounttransaction.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case coinaccounttransaction.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case coinaccounttransaction.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoinAccountTransaction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoinAccountTransactionMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, coinaccounttransaction.FieldAmount)
	}
	if m.addtransaction_fee != nil {
		fields = append(fields, coinaccounttransaction.FieldTransactionFee)
	}
	if m.addcreate_at != nil {
		fields = append(fields, coinaccounttransaction.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, coinaccounttransaction.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, coinaccounttransaction.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoinAccountTransactionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coinaccounttransaction.FieldAmount:
		return m.AddedAmount()
	case coinaccounttransaction.FieldTransactionFee:
		return m.AddedTransactionFee()
	case coinaccounttransaction.FieldCreateAt:
		return m.AddedCreateAt()
	case coinaccounttransaction.FieldUpdateAt:
		return m.AddedUpdateAt()
	case coinaccounttransaction.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinAccountTransactionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coinaccounttransaction.FieldAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case coinaccounttransaction.FieldTransactionFee:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTransactionFee(v)
		return nil
	case coinaccounttransaction.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case coinaccounttransaction.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case coinaccounttransaction.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoinAccountTransaction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoinAccountTransactionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoinAccountTransactionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoinAccountTransactionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CoinAccountTransaction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoinAccountTransactionMutation) ResetField(name string) error {
	switch name {
	case coinaccounttransaction.FieldAppID:
		m.ResetAppID()
		return nil
	case coinaccounttransaction.FieldUserID:
		m.ResetUserID()
		return nil
	case coinaccounttransaction.FieldGoodID:
		m.ResetGoodID()
		return nil
	case coinaccounttransaction.FieldFromAddressID:
		m.ResetFromAddressID()
		return nil
	case coinaccounttransaction.FieldToAddressID:
		m.ResetToAddressID()
		return nil
	case coinaccounttransaction.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case coinaccounttransaction.FieldAmount:
		m.ResetAmount()
		return nil
	case coinaccounttransaction.FieldTransactionFee:
		m.ResetTransactionFee()
		return nil
	case coinaccounttransaction.FieldMessage:
		m.ResetMessage()
		return nil
	case coinaccounttransaction.FieldState:
		m.ResetState()
		return nil
	case coinaccounttransaction.FieldChainTransactionID:
		m.ResetChainTransactionID()
		return nil
	case coinaccounttransaction.FieldFailHold:
		m.ResetFailHold()
		return nil
	case coinaccounttransaction.FieldCreatedFor:
		m.ResetCreatedFor()
		return nil
	case coinaccounttransaction.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case coinaccounttransaction.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case coinaccounttransaction.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown CoinAccountTransaction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoinAccountTransactionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoinAccountTransactionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoinAccountTransactionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoinAccountTransactionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoinAccountTransactionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoinAccountTransactionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoinAccountTransactionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CoinAccountTransaction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoinAccountTransactionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CoinAccountTransaction edge %s", name)
}

// CoinSettingMutation represents an operation that mutates the CoinSetting nodes in the graph.
type CoinSettingMutation struct {
	config
	op                             Op
	typ                            string
	id                             *uuid.UUID
	coin_type_id                   *uuid.UUID
	warm_account_coin_amount       *uint64
	addwarm_account_coin_amount    *int64
	payment_account_coin_amount    *uint64
	addpayment_account_coin_amount *int64
	platform_offline_account_id    *uuid.UUID
	user_online_account_id         *uuid.UUID
	user_offline_account_id        *uuid.UUID
	good_incoming_account_id       *uuid.UUID
	gas_provider_account_id        *uuid.UUID
	create_at                      *uint32
	addcreate_at                   *int32
	update_at                      *uint32
	addupdate_at                   *int32
	delete_at                      *uint32
	adddelete_at                   *int32
	clearedFields                  map[string]struct{}
	done                           bool
	oldValue                       func(context.Context) (*CoinSetting, error)
	predicates                     []predicate.CoinSetting
}

var _ ent.Mutation = (*CoinSettingMutation)(nil)

// coinsettingOption allows management of the mutation configuration using functional options.
type coinsettingOption func(*CoinSettingMutation)

// newCoinSettingMutation creates new mutation for the CoinSetting entity.
func newCoinSettingMutation(c config, op Op, opts ...coinsettingOption) *CoinSettingMutation {
	m := &CoinSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeCoinSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoinSettingID sets the ID field of the mutation.
func withCoinSettingID(id uuid.UUID) coinsettingOption {
	return func(m *CoinSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *CoinSetting
		)
		m.oldValue = func(ctx context.Context) (*CoinSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CoinSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoinSetting sets the old CoinSetting of the mutation.
func withCoinSetting(node *CoinSetting) coinsettingOption {
	return func(m *CoinSettingMutation) {
		m.oldValue = func(context.Context) (*CoinSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoinSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoinSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CoinSetting entities.
func (m *CoinSettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoinSettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoinSettingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CoinSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *CoinSettingMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *CoinSettingMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the CoinSetting entity.
// If the CoinSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinSettingMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *CoinSettingMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
}

// SetWarmAccountCoinAmount sets the "warm_account_coin_amount" field.
func (m *CoinSettingMutation) SetWarmAccountCoinAmount(u uint64) {
	m.warm_account_coin_amount = &u
	m.addwarm_account_coin_amount = nil
}

// WarmAccountCoinAmount returns the value of the "warm_account_coin_amount" field in the mutation.
func (m *CoinSettingMutation) WarmAccountCoinAmount() (r uint64, exists bool) {
	v := m.warm_account_coin_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldWarmAccountCoinAmount returns the old "warm_account_coin_amount" field's value of the CoinSetting entity.
// If the CoinSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinSettingMutation) OldWarmAccountCoinAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWarmAccountCoinAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWarmAccountCoinAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWarmAccountCoinAmount: %w", err)
	}
	return oldValue.WarmAccountCoinAmount, nil
}

// AddWarmAccountCoinAmount adds u to the "warm_account_coin_amount" field.
func (m *CoinSettingMutation) AddWarmAccountCoinAmount(u int64) {
	if m.addwarm_account_coin_amount != nil {
		*m.addwarm_account_coin_amount += u
	} else {
		m.addwarm_account_coin_amount = &u
	}
}

// AddedWarmAccountCoinAmount returns the value that was added to the "warm_account_coin_amount" field in this mutation.
func (m *CoinSettingMutation) AddedWarmAccountCoinAmount() (r int64, exists bool) {
	v := m.addwarm_account_coin_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetWarmAccountCoinAmount resets all changes to the "warm_account_coin_amount" field.
func (m *CoinSettingMutation) ResetWarmAccountCoinAmount() {
	m.warm_account_coin_amount = nil
	m.addwarm_account_coin_amount = nil
}

// SetPaymentAccountCoinAmount sets the "payment_account_coin_amount" field.
func (m *CoinSettingMutation) SetPaymentAccountCoinAmount(u uint64) {
	m.payment_account_coin_amount = &u
	m.addpayment_account_coin_amount = nil
}

// PaymentAccountCoinAmount returns the value of the "payment_account_coin_amount" field in the mutation.
func (m *CoinSettingMutation) PaymentAccountCoinAmount() (r uint64, exists bool) {
	v := m.payment_account_coin_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentAccountCoinAmount returns the old "payment_account_coin_amount" field's value of the CoinSetting entity.
// If the CoinSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinSettingMutation) OldPaymentAccountCoinAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentAccountCoinAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentAccountCoinAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentAccountCoinAmount: %w", err)
	}
	return oldValue.PaymentAccountCoinAmount, nil
}

// AddPaymentAccountCoinAmount adds u to the "payment_account_coin_amount" field.
func (m *CoinSettingMutation) AddPaymentAccountCoinAmount(u int64) {
	if m.addpayment_account_coin_amount != nil {
		*m.addpayment_account_coin_amount += u
	} else {
		m.addpayment_account_coin_amount = &u
	}
}

// AddedPaymentAccountCoinAmount returns the value that was added to the "payment_account_coin_amount" field in this mutation.
func (m *CoinSettingMutation) AddedPaymentAccountCoinAmount() (r int64, exists bool) {
	v := m.addpayment_account_coin_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetPaymentAccountCoinAmount resets all changes to the "payment_account_coin_amount" field.
func (m *CoinSettingMutation) ResetPaymentAccountCoinAmount() {
	m.payment_account_coin_amount = nil
	m.addpayment_account_coin_amount = nil
}

// SetPlatformOfflineAccountID sets the "platform_offline_account_id" field.
func (m *CoinSettingMutation) SetPlatformOfflineAccountID(u uuid.UUID) {
	m.platform_offline_account_id = &u
}

// PlatformOfflineAccountID returns the value of the "platform_offline_account_id" field in the mutation.
func (m *CoinSettingMutation) PlatformOfflineAccountID() (r uuid.UUID, exists bool) {
	v := m.platform_offline_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatformOfflineAccountID returns the old "platform_offline_account_id" field's value of the CoinSetting entity.
// If the CoinSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinSettingMutation) OldPlatformOfflineAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatformOfflineAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatformOfflineAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatformOfflineAccountID: %w", err)
	}
	return oldValue.PlatformOfflineAccountID, nil
}

// ResetPlatformOfflineAccountID resets all changes to the "platform_offline_account_id" field.
func (m *CoinSettingMutation) ResetPlatformOfflineAccountID() {
	m.platform_offline_account_id = nil
}

// SetUserOnlineAccountID sets the "user_online_account_id" field.
func (m *CoinSettingMutation) SetUserOnlineAccountID(u uuid.UUID) {
	m.user_online_account_id = &u
}

// UserOnlineAccountID returns the value of the "user_online_account_id" field in the mutation.
func (m *CoinSettingMutation) UserOnlineAccountID() (r uuid.UUID, exists bool) {
	v := m.user_online_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserOnlineAccountID returns the old "user_online_account_id" field's value of the CoinSetting entity.
// If the CoinSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinSettingMutation) OldUserOnlineAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserOnlineAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserOnlineAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserOnlineAccountID: %w", err)
	}
	return oldValue.UserOnlineAccountID, nil
}

// ResetUserOnlineAccountID resets all changes to the "user_online_account_id" field.
func (m *CoinSettingMutation) ResetUserOnlineAccountID() {
	m.user_online_account_id = nil
}

// SetUserOfflineAccountID sets the "user_offline_account_id" field.
func (m *CoinSettingMutation) SetUserOfflineAccountID(u uuid.UUID) {
	m.user_offline_account_id = &u
}

// UserOfflineAccountID returns the value of the "user_offline_account_id" field in the mutation.
func (m *CoinSettingMutation) UserOfflineAccountID() (r uuid.UUID, exists bool) {
	v := m.user_offline_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserOfflineAccountID returns the old "user_offline_account_id" field's value of the CoinSetting entity.
// If the CoinSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinSettingMutation) OldUserOfflineAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserOfflineAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserOfflineAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserOfflineAccountID: %w", err)
	}
	return oldValue.UserOfflineAccountID, nil
}

// ResetUserOfflineAccountID resets all changes to the "user_offline_account_id" field.
func (m *CoinSettingMutation) ResetUserOfflineAccountID() {
	m.user_offline_account_id = nil
}

// SetGoodIncomingAccountID sets the "good_incoming_account_id" field.
func (m *CoinSettingMutation) SetGoodIncomingAccountID(u uuid.UUID) {
	m.good_incoming_account_id = &u
}

// GoodIncomingAccountID returns the value of the "good_incoming_account_id" field in the mutation.
func (m *CoinSettingMutation) GoodIncomingAccountID() (r uuid.UUID, exists bool) {
	v := m.good_incoming_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodIncomingAccountID returns the old "good_incoming_account_id" field's value of the CoinSetting entity.
// If the CoinSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinSettingMutation) OldGoodIncomingAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodIncomingAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodIncomingAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodIncomingAccountID: %w", err)
	}
	return oldValue.GoodIncomingAccountID, nil
}

// ResetGoodIncomingAccountID resets all changes to the "good_incoming_account_id" field.
func (m *CoinSettingMutation) ResetGoodIncomingAccountID() {
	m.good_incoming_account_id = nil
}

// SetGasProviderAccountID sets the "gas_provider_account_id" field.
func (m *CoinSettingMutation) SetGasProviderAccountID(u uuid.UUID) {
	m.gas_provider_account_id = &u
}

// GasProviderAccountID returns the value of the "gas_provider_account_id" field in the mutation.
func (m *CoinSettingMutation) GasProviderAccountID() (r uuid.UUID, exists bool) {
	v := m.gas_provider_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGasProviderAccountID returns the old "gas_provider_account_id" field's value of the CoinSetting entity.
// If the CoinSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinSettingMutation) OldGasProviderAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGasProviderAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGasProviderAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGasProviderAccountID: %w", err)
	}
	return oldValue.GasProviderAccountID, nil
}

// ResetGasProviderAccountID resets all changes to the "gas_provider_account_id" field.
func (m *CoinSettingMutation) ResetGasProviderAccountID() {
	m.gas_provider_account_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *CoinSettingMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *CoinSettingMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the CoinSetting entity.
// If the CoinSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinSettingMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *CoinSettingMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *CoinSettingMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *CoinSettingMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *CoinSettingMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *CoinSettingMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the CoinSetting entity.
// If the CoinSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinSettingMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *CoinSettingMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *CoinSettingMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *CoinSettingMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *CoinSettingMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *CoinSettingMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the CoinSetting entity.
// If the CoinSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoinSettingMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *CoinSettingMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *CoinSettingMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *CoinSettingMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the CoinSettingMutation builder.
func (m *CoinSettingMutation) Where(ps ...predicate.CoinSetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CoinSettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CoinSetting).
func (m *CoinSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoinSettingMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.coin_type_id != nil {
		fields = append(fields, coinsetting.FieldCoinTypeID)
	}
	if m.warm_account_coin_amount != nil {
		fields = append(fields, coinsetting.FieldWarmAccountCoinAmount)
	}
	if m.payment_account_coin_amount != nil {
		fields = append(fields, coinsetting.FieldPaymentAccountCoinAmount)
	}
	if m.platform_offline_account_id != nil {
		fields = append(fields, coinsetting.FieldPlatformOfflineAccountID)
	}
	if m.user_online_account_id != nil {
		fields = append(fields, coinsetting.FieldUserOnlineAccountID)
	}
	if m.user_offline_account_id != nil {
		fields = append(fields, coinsetting.FieldUserOfflineAccountID)
	}
	if m.good_incoming_account_id != nil {
		fields = append(fields, coinsetting.FieldGoodIncomingAccountID)
	}
	if m.gas_provider_account_id != nil {
		fields = append(fields, coinsetting.FieldGasProviderAccountID)
	}
	if m.create_at != nil {
		fields = append(fields, coinsetting.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, coinsetting.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, coinsetting.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoinSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coinsetting.FieldCoinTypeID:
		return m.CoinTypeID()
	case coinsetting.FieldWarmAccountCoinAmount:
		return m.WarmAccountCoinAmount()
	case coinsetting.FieldPaymentAccountCoinAmount:
		return m.PaymentAccountCoinAmount()
	case coinsetting.FieldPlatformOfflineAccountID:
		return m.PlatformOfflineAccountID()
	case coinsetting.FieldUserOnlineAccountID:
		return m.UserOnlineAccountID()
	case coinsetting.FieldUserOfflineAccountID:
		return m.UserOfflineAccountID()
	case coinsetting.FieldGoodIncomingAccountID:
		return m.GoodIncomingAccountID()
	case coinsetting.FieldGasProviderAccountID:
		return m.GasProviderAccountID()
	case coinsetting.FieldCreateAt:
		return m.CreateAt()
	case coinsetting.FieldUpdateAt:
		return m.UpdateAt()
	case coinsetting.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoinSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coinsetting.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case coinsetting.FieldWarmAccountCoinAmount:
		return m.OldWarmAccountCoinAmount(ctx)
	case coinsetting.FieldPaymentAccountCoinAmount:
		return m.OldPaymentAccountCoinAmount(ctx)
	case coinsetting.FieldPlatformOfflineAccountID:
		return m.OldPlatformOfflineAccountID(ctx)
	case coinsetting.FieldUserOnlineAccountID:
		return m.OldUserOnlineAccountID(ctx)
	case coinsetting.FieldUserOfflineAccountID:
		return m.OldUserOfflineAccountID(ctx)
	case coinsetting.FieldGoodIncomingAccountID:
		return m.OldGoodIncomingAccountID(ctx)
	case coinsetting.FieldGasProviderAccountID:
		return m.OldGasProviderAccountID(ctx)
	case coinsetting.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case coinsetting.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case coinsetting.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown CoinSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coinsetting.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case coinsetting.FieldWarmAccountCoinAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWarmAccountCoinAmount(v)
		return nil
	case coinsetting.FieldPaymentAccountCoinAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentAccountCoinAmount(v)
		return nil
	case coinsetting.FieldPlatformOfflineAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatformOfflineAccountID(v)
		return nil
	case coinsetting.FieldUserOnlineAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserOnlineAccountID(v)
		return nil
	case coinsetting.FieldUserOfflineAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserOfflineAccountID(v)
		return nil
	case coinsetting.FieldGoodIncomingAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodIncomingAccountID(v)
		return nil
	case coinsetting.FieldGasProviderAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGasProviderAccountID(v)
		return nil
	case coinsetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case coinsetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case coinsetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoinSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoinSettingMutation) AddedFields() []string {
	var fields []string
	if m.addwarm_account_coin_amount != nil {
		fields = append(fields, coinsetting.FieldWarmAccountCoinAmount)
	}
	if m.addpayment_account_coin_amount != nil {
		fields = append(fields, coinsetting.FieldPaymentAccountCoinAmount)
	}
	if m.addcreate_at != nil {
		fields = append(fields, coinsetting.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, coinsetting.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, coinsetting.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoinSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coinsetting.FieldWarmAccountCoinAmount:
		return m.AddedWarmAccountCoinAmount()
	case coinsetting.FieldPaymentAccountCoinAmount:
		return m.AddedPaymentAccountCoinAmount()
	case coinsetting.FieldCreateAt:
		return m.AddedCreateAt()
	case coinsetting.FieldUpdateAt:
		return m.AddedUpdateAt()
	case coinsetting.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoinSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coinsetting.FieldWarmAccountCoinAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWarmAccountCoinAmount(v)
		return nil
	case coinsetting.FieldPaymentAccountCoinAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPaymentAccountCoinAmount(v)
		return nil
	case coinsetting.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case coinsetting.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case coinsetting.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown CoinSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoinSettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoinSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoinSettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CoinSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoinSettingMutation) ResetField(name string) error {
	switch name {
	case coinsetting.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case coinsetting.FieldWarmAccountCoinAmount:
		m.ResetWarmAccountCoinAmount()
		return nil
	case coinsetting.FieldPaymentAccountCoinAmount:
		m.ResetPaymentAccountCoinAmount()
		return nil
	case coinsetting.FieldPlatformOfflineAccountID:
		m.ResetPlatformOfflineAccountID()
		return nil
	case coinsetting.FieldUserOnlineAccountID:
		m.ResetUserOnlineAccountID()
		return nil
	case coinsetting.FieldUserOfflineAccountID:
		m.ResetUserOfflineAccountID()
		return nil
	case coinsetting.FieldGoodIncomingAccountID:
		m.ResetGoodIncomingAccountID()
		return nil
	case coinsetting.FieldGasProviderAccountID:
		m.ResetGasProviderAccountID()
		return nil
	case coinsetting.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case coinsetting.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case coinsetting.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown CoinSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoinSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoinSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoinSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoinSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoinSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoinSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoinSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CoinSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoinSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CoinSetting edge %s", name)
}

// GoodBenefitMutation represents an operation that mutates the GoodBenefit nodes in the graph.
type GoodBenefitMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	good_id                   *uuid.UUID
	benefit_account_id        *uuid.UUID
	benefit_interval_hours    *uint32
	addbenefit_interval_hours *int32
	create_at                 *uint32
	addcreate_at              *int32
	update_at                 *uint32
	addupdate_at              *int32
	delete_at                 *uint32
	adddelete_at              *int32
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*GoodBenefit, error)
	predicates                []predicate.GoodBenefit
}

var _ ent.Mutation = (*GoodBenefitMutation)(nil)

// goodbenefitOption allows management of the mutation configuration using functional options.
type goodbenefitOption func(*GoodBenefitMutation)

// newGoodBenefitMutation creates new mutation for the GoodBenefit entity.
func newGoodBenefitMutation(c config, op Op, opts ...goodbenefitOption) *GoodBenefitMutation {
	m := &GoodBenefitMutation{
		config:        c,
		op:            op,
		typ:           TypeGoodBenefit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGoodBenefitID sets the ID field of the mutation.
func withGoodBenefitID(id uuid.UUID) goodbenefitOption {
	return func(m *GoodBenefitMutation) {
		var (
			err   error
			once  sync.Once
			value *GoodBenefit
		)
		m.oldValue = func(ctx context.Context) (*GoodBenefit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GoodBenefit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGoodBenefit sets the old GoodBenefit of the mutation.
func withGoodBenefit(node *GoodBenefit) goodbenefitOption {
	return func(m *GoodBenefitMutation) {
		m.oldValue = func(context.Context) (*GoodBenefit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GoodBenefitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GoodBenefitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GoodBenefit entities.
func (m *GoodBenefitMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GoodBenefitMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GoodBenefitMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GoodBenefit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGoodID sets the "good_id" field.
func (m *GoodBenefitMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *GoodBenefitMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *GoodBenefitMutation) ResetGoodID() {
	m.good_id = nil
}

// SetBenefitAccountID sets the "benefit_account_id" field.
func (m *GoodBenefitMutation) SetBenefitAccountID(u uuid.UUID) {
	m.benefit_account_id = &u
}

// BenefitAccountID returns the value of the "benefit_account_id" field in the mutation.
func (m *GoodBenefitMutation) BenefitAccountID() (r uuid.UUID, exists bool) {
	v := m.benefit_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitAccountID returns the old "benefit_account_id" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldBenefitAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBenefitAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBenefitAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitAccountID: %w", err)
	}
	return oldValue.BenefitAccountID, nil
}

// ResetBenefitAccountID resets all changes to the "benefit_account_id" field.
func (m *GoodBenefitMutation) ResetBenefitAccountID() {
	m.benefit_account_id = nil
}

// SetBenefitIntervalHours sets the "benefit_interval_hours" field.
func (m *GoodBenefitMutation) SetBenefitIntervalHours(u uint32) {
	m.benefit_interval_hours = &u
	m.addbenefit_interval_hours = nil
}

// BenefitIntervalHours returns the value of the "benefit_interval_hours" field in the mutation.
func (m *GoodBenefitMutation) BenefitIntervalHours() (r uint32, exists bool) {
	v := m.benefit_interval_hours
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitIntervalHours returns the old "benefit_interval_hours" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldBenefitIntervalHours(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBenefitIntervalHours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBenefitIntervalHours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitIntervalHours: %w", err)
	}
	return oldValue.BenefitIntervalHours, nil
}

// AddBenefitIntervalHours adds u to the "benefit_interval_hours" field.
func (m *GoodBenefitMutation) AddBenefitIntervalHours(u int32) {
	if m.addbenefit_interval_hours != nil {
		*m.addbenefit_interval_hours += u
	} else {
		m.addbenefit_interval_hours = &u
	}
}

// AddedBenefitIntervalHours returns the value that was added to the "benefit_interval_hours" field in this mutation.
func (m *GoodBenefitMutation) AddedBenefitIntervalHours() (r int32, exists bool) {
	v := m.addbenefit_interval_hours
	if v == nil {
		return
	}
	return *v, true
}

// ResetBenefitIntervalHours resets all changes to the "benefit_interval_hours" field.
func (m *GoodBenefitMutation) ResetBenefitIntervalHours() {
	m.benefit_interval_hours = nil
	m.addbenefit_interval_hours = nil
}

// SetCreateAt sets the "create_at" field.
func (m *GoodBenefitMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *GoodBenefitMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *GoodBenefitMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *GoodBenefitMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *GoodBenefitMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *GoodBenefitMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *GoodBenefitMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *GoodBenefitMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *GoodBenefitMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *GoodBenefitMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *GoodBenefitMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *GoodBenefitMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the GoodBenefit entity.
// If the GoodBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodBenefitMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *GoodBenefitMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *GoodBenefitMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *GoodBenefitMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the GoodBenefitMutation builder.
func (m *GoodBenefitMutation) Where(ps ...predicate.GoodBenefit) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GoodBenefitMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GoodBenefit).
func (m *GoodBenefitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GoodBenefitMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.good_id != nil {
		fields = append(fields, goodbenefit.FieldGoodID)
	}
	if m.benefit_account_id != nil {
		fields = append(fields, goodbenefit.FieldBenefitAccountID)
	}
	if m.benefit_interval_hours != nil {
		fields = append(fields, goodbenefit.FieldBenefitIntervalHours)
	}
	if m.create_at != nil {
		fields = append(fields, goodbenefit.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, goodbenefit.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, goodbenefit.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GoodBenefitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goodbenefit.FieldGoodID:
		return m.GoodID()
	case goodbenefit.FieldBenefitAccountID:
		return m.BenefitAccountID()
	case goodbenefit.FieldBenefitIntervalHours:
		return m.BenefitIntervalHours()
	case goodbenefit.FieldCreateAt:
		return m.CreateAt()
	case goodbenefit.FieldUpdateAt:
		return m.UpdateAt()
	case goodbenefit.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GoodBenefitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goodbenefit.FieldGoodID:
		return m.OldGoodID(ctx)
	case goodbenefit.FieldBenefitAccountID:
		return m.OldBenefitAccountID(ctx)
	case goodbenefit.FieldBenefitIntervalHours:
		return m.OldBenefitIntervalHours(ctx)
	case goodbenefit.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case goodbenefit.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case goodbenefit.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown GoodBenefit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodBenefitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goodbenefit.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case goodbenefit.FieldBenefitAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitAccountID(v)
		return nil
	case goodbenefit.FieldBenefitIntervalHours:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitIntervalHours(v)
		return nil
	case goodbenefit.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case goodbenefit.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case goodbenefit.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodBenefit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GoodBenefitMutation) AddedFields() []string {
	var fields []string
	if m.addbenefit_interval_hours != nil {
		fields = append(fields, goodbenefit.FieldBenefitIntervalHours)
	}
	if m.addcreate_at != nil {
		fields = append(fields, goodbenefit.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, goodbenefit.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, goodbenefit.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GoodBenefitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case goodbenefit.FieldBenefitIntervalHours:
		return m.AddedBenefitIntervalHours()
	case goodbenefit.FieldCreateAt:
		return m.AddedCreateAt()
	case goodbenefit.FieldUpdateAt:
		return m.AddedUpdateAt()
	case goodbenefit.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodBenefitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case goodbenefit.FieldBenefitIntervalHours:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBenefitIntervalHours(v)
		return nil
	case goodbenefit.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case goodbenefit.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case goodbenefit.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodBenefit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GoodBenefitMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GoodBenefitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GoodBenefitMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GoodBenefit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GoodBenefitMutation) ResetField(name string) error {
	switch name {
	case goodbenefit.FieldGoodID:
		m.ResetGoodID()
		return nil
	case goodbenefit.FieldBenefitAccountID:
		m.ResetBenefitAccountID()
		return nil
	case goodbenefit.FieldBenefitIntervalHours:
		m.ResetBenefitIntervalHours()
		return nil
	case goodbenefit.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case goodbenefit.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case goodbenefit.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown GoodBenefit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GoodBenefitMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GoodBenefitMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GoodBenefitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GoodBenefitMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GoodBenefitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GoodBenefitMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GoodBenefitMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GoodBenefit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GoodBenefitMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GoodBenefit edge %s", name)
}

// GoodPaymentMutation represents an operation that mutates the GoodPayment nodes in the graph.
type GoodPaymentMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	good_id              *uuid.UUID
	payment_coin_type_id *uuid.UUID
	account_id           *uuid.UUID
	idle                 *bool
	occupied_by          *string
	available_at         *uint32
	addavailable_at      *int32
	collecting_tid       *uuid.UUID
	used_for             *string
	create_at            *uint32
	addcreate_at         *int32
	update_at            *uint32
	addupdate_at         *int32
	delete_at            *uint32
	adddelete_at         *int32
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*GoodPayment, error)
	predicates           []predicate.GoodPayment
}

var _ ent.Mutation = (*GoodPaymentMutation)(nil)

// goodpaymentOption allows management of the mutation configuration using functional options.
type goodpaymentOption func(*GoodPaymentMutation)

// newGoodPaymentMutation creates new mutation for the GoodPayment entity.
func newGoodPaymentMutation(c config, op Op, opts ...goodpaymentOption) *GoodPaymentMutation {
	m := &GoodPaymentMutation{
		config:        c,
		op:            op,
		typ:           TypeGoodPayment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGoodPaymentID sets the ID field of the mutation.
func withGoodPaymentID(id uuid.UUID) goodpaymentOption {
	return func(m *GoodPaymentMutation) {
		var (
			err   error
			once  sync.Once
			value *GoodPayment
		)
		m.oldValue = func(ctx context.Context) (*GoodPayment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GoodPayment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGoodPayment sets the old GoodPayment of the mutation.
func withGoodPayment(node *GoodPayment) goodpaymentOption {
	return func(m *GoodPaymentMutation) {
		m.oldValue = func(context.Context) (*GoodPayment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GoodPaymentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GoodPaymentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GoodPayment entities.
func (m *GoodPaymentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GoodPaymentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GoodPaymentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GoodPayment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGoodID sets the "good_id" field.
func (m *GoodPaymentMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *GoodPaymentMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the GoodPayment entity.
// If the GoodPayment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodPaymentMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *GoodPaymentMutation) ResetGoodID() {
	m.good_id = nil
}

// SetPaymentCoinTypeID sets the "payment_coin_type_id" field.
func (m *GoodPaymentMutation) SetPaymentCoinTypeID(u uuid.UUID) {
	m.payment_coin_type_id = &u
}

// PaymentCoinTypeID returns the value of the "payment_coin_type_id" field in the mutation.
func (m *GoodPaymentMutation) PaymentCoinTypeID() (r uuid.UUID, exists bool) {
	v := m.payment_coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentCoinTypeID returns the old "payment_coin_type_id" field's value of the GoodPayment entity.
// If the GoodPayment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodPaymentMutation) OldPaymentCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentCoinTypeID: %w", err)
	}
	return oldValue.PaymentCoinTypeID, nil
}

// ResetPaymentCoinTypeID resets all changes to the "payment_coin_type_id" field.
func (m *GoodPaymentMutation) ResetPaymentCoinTypeID() {
	m.payment_coin_type_id = nil
}

// SetAccountID sets the "account_id" field.
func (m *GoodPaymentMutation) SetAccountID(u uuid.UUID) {
	m.account_id = &u
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *GoodPaymentMutation) AccountID() (r uuid.UUID, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the GoodPayment entity.
// If the GoodPayment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodPaymentMutation) OldAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}
	return oldValue.AccountID, nil
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *GoodPaymentMutation) ResetAccountID() {
	m.account_id = nil
}

// SetIdle sets the "idle" field.
func (m *GoodPaymentMutation) SetIdle(b bool) {
	m.idle = &b
}

// Idle returns the value of the "idle" field in the mutation.
func (m *GoodPaymentMutation) Idle() (r bool, exists bool) {
	v := m.idle
	if v == nil {
		return
	}
	return *v, true
}

// OldIdle returns the old "idle" field's value of the GoodPayment entity.
// If the GoodPayment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodPaymentMutation) OldIdle(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIdle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIdle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdle: %w", err)
	}
	return oldValue.Idle, nil
}

// ResetIdle resets all changes to the "idle" field.
func (m *GoodPaymentMutation) ResetIdle() {
	m.idle = nil
}

// SetOccupiedBy sets the "occupied_by" field.
func (m *GoodPaymentMutation) SetOccupiedBy(s string) {
	m.occupied_by = &s
}

// OccupiedBy returns the value of the "occupied_by" field in the mutation.
func (m *GoodPaymentMutation) OccupiedBy() (r string, exists bool) {
	v := m.occupied_by
	if v == nil {
		return
	}
	return *v, true
}

// OldOccupiedBy returns the old "occupied_by" field's value of the GoodPayment entity.
// If the GoodPayment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodPaymentMutation) OldOccupiedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOccupiedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOccupiedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOccupiedBy: %w", err)
	}
	return oldValue.OccupiedBy, nil
}

// ResetOccupiedBy resets all changes to the "occupied_by" field.
func (m *GoodPaymentMutation) ResetOccupiedBy() {
	m.occupied_by = nil
}

// SetAvailableAt sets the "available_at" field.
func (m *GoodPaymentMutation) SetAvailableAt(u uint32) {
	m.available_at = &u
	m.addavailable_at = nil
}

// AvailableAt returns the value of the "available_at" field in the mutation.
func (m *GoodPaymentMutation) AvailableAt() (r uint32, exists bool) {
	v := m.available_at
	if v == nil {
		return
	}
	return *v, true
}

// OldAvailableAt returns the old "available_at" field's value of the GoodPayment entity.
// If the GoodPayment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodPaymentMutation) OldAvailableAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvailableAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvailableAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvailableAt: %w", err)
	}
	return oldValue.AvailableAt, nil
}

// AddAvailableAt adds u to the "available_at" field.
func (m *GoodPaymentMutation) AddAvailableAt(u int32) {
	if m.addavailable_at != nil {
		*m.addavailable_at += u
	} else {
		m.addavailable_at = &u
	}
}

// AddedAvailableAt returns the value that was added to the "available_at" field in this mutation.
func (m *GoodPaymentMutation) AddedAvailableAt() (r int32, exists bool) {
	v := m.addavailable_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetAvailableAt resets all changes to the "available_at" field.
func (m *GoodPaymentMutation) ResetAvailableAt() {
	m.available_at = nil
	m.addavailable_at = nil
}

// SetCollectingTid sets the "collecting_tid" field.
func (m *GoodPaymentMutation) SetCollectingTid(u uuid.UUID) {
	m.collecting_tid = &u
}

// CollectingTid returns the value of the "collecting_tid" field in the mutation.
func (m *GoodPaymentMutation) CollectingTid() (r uuid.UUID, exists bool) {
	v := m.collecting_tid
	if v == nil {
		return
	}
	return *v, true
}

// OldCollectingTid returns the old "collecting_tid" field's value of the GoodPayment entity.
// If the GoodPayment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodPaymentMutation) OldCollectingTid(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCollectingTid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCollectingTid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCollectingTid: %w", err)
	}
	return oldValue.CollectingTid, nil
}

// ClearCollectingTid clears the value of the "collecting_tid" field.
func (m *GoodPaymentMutation) ClearCollectingTid() {
	m.collecting_tid = nil
	m.clearedFields[goodpayment.FieldCollectingTid] = struct{}{}
}

// CollectingTidCleared returns if the "collecting_tid" field was cleared in this mutation.
func (m *GoodPaymentMutation) CollectingTidCleared() bool {
	_, ok := m.clearedFields[goodpayment.FieldCollectingTid]
	return ok
}

// ResetCollectingTid resets all changes to the "collecting_tid" field.
func (m *GoodPaymentMutation) ResetCollectingTid() {
	m.collecting_tid = nil
	delete(m.clearedFields, goodpayment.FieldCollectingTid)
}

// SetUsedFor sets the "used_for" field.
func (m *GoodPaymentMutation) SetUsedFor(s string) {
	m.used_for = &s
}

// UsedFor returns the value of the "used_for" field in the mutation.
func (m *GoodPaymentMutation) UsedFor() (r string, exists bool) {
	v := m.used_for
	if v == nil {
		return
	}
	return *v, true
}

// OldUsedFor returns the old "used_for" field's value of the GoodPayment entity.
// If the GoodPayment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodPaymentMutation) OldUsedFor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsedFor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsedFor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsedFor: %w", err)
	}
	return oldValue.UsedFor, nil
}

// ClearUsedFor clears the value of the "used_for" field.
func (m *GoodPaymentMutation) ClearUsedFor() {
	m.used_for = nil
	m.clearedFields[goodpayment.FieldUsedFor] = struct{}{}
}

// UsedForCleared returns if the "used_for" field was cleared in this mutation.
func (m *GoodPaymentMutation) UsedForCleared() bool {
	_, ok := m.clearedFields[goodpayment.FieldUsedFor]
	return ok
}

// ResetUsedFor resets all changes to the "used_for" field.
func (m *GoodPaymentMutation) ResetUsedFor() {
	m.used_for = nil
	delete(m.clearedFields, goodpayment.FieldUsedFor)
}

// SetCreateAt sets the "create_at" field.
func (m *GoodPaymentMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *GoodPaymentMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the GoodPayment entity.
// If the GoodPayment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodPaymentMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *GoodPaymentMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *GoodPaymentMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *GoodPaymentMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *GoodPaymentMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *GoodPaymentMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the GoodPayment entity.
// If the GoodPayment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodPaymentMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *GoodPaymentMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *GoodPaymentMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *GoodPaymentMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *GoodPaymentMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *GoodPaymentMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the GoodPayment entity.
// If the GoodPayment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoodPaymentMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *GoodPaymentMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *GoodPaymentMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *GoodPaymentMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the GoodPaymentMutation builder.
func (m *GoodPaymentMutation) Where(ps ...predicate.GoodPayment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GoodPaymentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GoodPayment).
func (m *GoodPaymentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GoodPaymentMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.good_id != nil {
		fields = append(fields, goodpayment.FieldGoodID)
	}
	if m.payment_coin_type_id != nil {
		fields = append(fields, goodpayment.FieldPaymentCoinTypeID)
	}
	if m.account_id != nil {
		fields = append(fields, goodpayment.FieldAccountID)
	}
	if m.idle != nil {
		fields = append(fields, goodpayment.FieldIdle)
	}
	if m.occupied_by != nil {
		fields = append(fields, goodpayment.FieldOccupiedBy)
	}
	if m.available_at != nil {
		fields = append(fields, goodpayment.FieldAvailableAt)
	}
	if m.collecting_tid != nil {
		fields = append(fields, goodpayment.FieldCollectingTid)
	}
	if m.used_for != nil {
		fields = append(fields, goodpayment.FieldUsedFor)
	}
	if m.create_at != nil {
		fields = append(fields, goodpayment.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, goodpayment.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, goodpayment.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GoodPaymentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goodpayment.FieldGoodID:
		return m.GoodID()
	case goodpayment.FieldPaymentCoinTypeID:
		return m.PaymentCoinTypeID()
	case goodpayment.FieldAccountID:
		return m.AccountID()
	case goodpayment.FieldIdle:
		return m.Idle()
	case goodpayment.FieldOccupiedBy:
		return m.OccupiedBy()
	case goodpayment.FieldAvailableAt:
		return m.AvailableAt()
	case goodpayment.FieldCollectingTid:
		return m.CollectingTid()
	case goodpayment.FieldUsedFor:
		return m.UsedFor()
	case goodpayment.FieldCreateAt:
		return m.CreateAt()
	case goodpayment.FieldUpdateAt:
		return m.UpdateAt()
	case goodpayment.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GoodPaymentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goodpayment.FieldGoodID:
		return m.OldGoodID(ctx)
	case goodpayment.FieldPaymentCoinTypeID:
		return m.OldPaymentCoinTypeID(ctx)
	case goodpayment.FieldAccountID:
		return m.OldAccountID(ctx)
	case goodpayment.FieldIdle:
		return m.OldIdle(ctx)
	case goodpayment.FieldOccupiedBy:
		return m.OldOccupiedBy(ctx)
	case goodpayment.FieldAvailableAt:
		return m.OldAvailableAt(ctx)
	case goodpayment.FieldCollectingTid:
		return m.OldCollectingTid(ctx)
	case goodpayment.FieldUsedFor:
		return m.OldUsedFor(ctx)
	case goodpayment.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case goodpayment.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case goodpayment.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown GoodPayment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodPaymentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goodpayment.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case goodpayment.FieldPaymentCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentCoinTypeID(v)
		return nil
	case goodpayment.FieldAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountID(v)
		return nil
	case goodpayment.FieldIdle:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdle(v)
		return nil
	case goodpayment.FieldOccupiedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOccupiedBy(v)
		return nil
	case goodpayment.FieldAvailableAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvailableAt(v)
		return nil
	case goodpayment.FieldCollectingTid:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCollectingTid(v)
		return nil
	case goodpayment.FieldUsedFor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsedFor(v)
		return nil
	case goodpayment.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case goodpayment.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case goodpayment.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodPayment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GoodPaymentMutation) AddedFields() []string {
	var fields []string
	if m.addavailable_at != nil {
		fields = append(fields, goodpayment.FieldAvailableAt)
	}
	if m.addcreate_at != nil {
		fields = append(fields, goodpayment.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, goodpayment.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, goodpayment.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GoodPaymentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case goodpayment.FieldAvailableAt:
		return m.AddedAvailableAt()
	case goodpayment.FieldCreateAt:
		return m.AddedCreateAt()
	case goodpayment.FieldUpdateAt:
		return m.AddedUpdateAt()
	case goodpayment.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoodPaymentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case goodpayment.FieldAvailableAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAvailableAt(v)
		return nil
	case goodpayment.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case goodpayment.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case goodpayment.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown GoodPayment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GoodPaymentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(goodpayment.FieldCollectingTid) {
		fields = append(fields, goodpayment.FieldCollectingTid)
	}
	if m.FieldCleared(goodpayment.FieldUsedFor) {
		fields = append(fields, goodpayment.FieldUsedFor)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GoodPaymentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GoodPaymentMutation) ClearField(name string) error {
	switch name {
	case goodpayment.FieldCollectingTid:
		m.ClearCollectingTid()
		return nil
	case goodpayment.FieldUsedFor:
		m.ClearUsedFor()
		return nil
	}
	return fmt.Errorf("unknown GoodPayment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GoodPaymentMutation) ResetField(name string) error {
	switch name {
	case goodpayment.FieldGoodID:
		m.ResetGoodID()
		return nil
	case goodpayment.FieldPaymentCoinTypeID:
		m.ResetPaymentCoinTypeID()
		return nil
	case goodpayment.FieldAccountID:
		m.ResetAccountID()
		return nil
	case goodpayment.FieldIdle:
		m.ResetIdle()
		return nil
	case goodpayment.FieldOccupiedBy:
		m.ResetOccupiedBy()
		return nil
	case goodpayment.FieldAvailableAt:
		m.ResetAvailableAt()
		return nil
	case goodpayment.FieldCollectingTid:
		m.ResetCollectingTid()
		return nil
	case goodpayment.FieldUsedFor:
		m.ResetUsedFor()
		return nil
	case goodpayment.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case goodpayment.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case goodpayment.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown GoodPayment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GoodPaymentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GoodPaymentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GoodPaymentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GoodPaymentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GoodPaymentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GoodPaymentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GoodPaymentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GoodPayment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GoodPaymentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GoodPayment edge %s", name)
}

// PlatformBenefitMutation represents an operation that mutates the PlatformBenefit nodes in the graph.
type PlatformBenefitMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	good_id                   *uuid.UUID
	benefit_account_id        *uuid.UUID
	amount                    *uint64
	addamount                 *int64
	last_benefit_timestamp    *uint32
	addlast_benefit_timestamp *int32
	chain_transaction_id      *string
	create_at                 *uint32
	addcreate_at              *int32
	update_at                 *uint32
	addupdate_at              *int32
	delete_at                 *uint32
	adddelete_at              *int32
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*PlatformBenefit, error)
	predicates                []predicate.PlatformBenefit
}

var _ ent.Mutation = (*PlatformBenefitMutation)(nil)

// platformbenefitOption allows management of the mutation configuration using functional options.
type platformbenefitOption func(*PlatformBenefitMutation)

// newPlatformBenefitMutation creates new mutation for the PlatformBenefit entity.
func newPlatformBenefitMutation(c config, op Op, opts ...platformbenefitOption) *PlatformBenefitMutation {
	m := &PlatformBenefitMutation{
		config:        c,
		op:            op,
		typ:           TypePlatformBenefit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlatformBenefitID sets the ID field of the mutation.
func withPlatformBenefitID(id uuid.UUID) platformbenefitOption {
	return func(m *PlatformBenefitMutation) {
		var (
			err   error
			once  sync.Once
			value *PlatformBenefit
		)
		m.oldValue = func(ctx context.Context) (*PlatformBenefit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PlatformBenefit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlatformBenefit sets the old PlatformBenefit of the mutation.
func withPlatformBenefit(node *PlatformBenefit) platformbenefitOption {
	return func(m *PlatformBenefitMutation) {
		m.oldValue = func(context.Context) (*PlatformBenefit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlatformBenefitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlatformBenefitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PlatformBenefit entities.
func (m *PlatformBenefitMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlatformBenefitMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlatformBenefitMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PlatformBenefit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGoodID sets the "good_id" field.
func (m *PlatformBenefitMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *PlatformBenefitMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the PlatformBenefit entity.
// If the PlatformBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformBenefitMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *PlatformBenefitMutation) ResetGoodID() {
	m.good_id = nil
}

// SetBenefitAccountID sets the "benefit_account_id" field.
func (m *PlatformBenefitMutation) SetBenefitAccountID(u uuid.UUID) {
	m.benefit_account_id = &u
}

// BenefitAccountID returns the value of the "benefit_account_id" field in the mutation.
func (m *PlatformBenefitMutation) BenefitAccountID() (r uuid.UUID, exists bool) {
	v := m.benefit_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBenefitAccountID returns the old "benefit_account_id" field's value of the PlatformBenefit entity.
// If the PlatformBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformBenefitMutation) OldBenefitAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBenefitAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBenefitAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBenefitAccountID: %w", err)
	}
	return oldValue.BenefitAccountID, nil
}

// ResetBenefitAccountID resets all changes to the "benefit_account_id" field.
func (m *PlatformBenefitMutation) ResetBenefitAccountID() {
	m.benefit_account_id = nil
}

// SetAmount sets the "amount" field.
func (m *PlatformBenefitMutation) SetAmount(u uint64) {
	m.amount = &u
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *PlatformBenefitMutation) Amount() (r uint64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the PlatformBenefit entity.
// If the PlatformBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformBenefitMutation) OldAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds u to the "amount" field.
func (m *PlatformBenefitMutation) AddAmount(u int64) {
	if m.addamount != nil {
		*m.addamount += u
	} else {
		m.addamount = &u
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *PlatformBenefitMutation) AddedAmount() (r int64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *PlatformBenefitMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetLastBenefitTimestamp sets the "last_benefit_timestamp" field.
func (m *PlatformBenefitMutation) SetLastBenefitTimestamp(u uint32) {
	m.last_benefit_timestamp = &u
	m.addlast_benefit_timestamp = nil
}

// LastBenefitTimestamp returns the value of the "last_benefit_timestamp" field in the mutation.
func (m *PlatformBenefitMutation) LastBenefitTimestamp() (r uint32, exists bool) {
	v := m.last_benefit_timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldLastBenefitTimestamp returns the old "last_benefit_timestamp" field's value of the PlatformBenefit entity.
// If the PlatformBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformBenefitMutation) OldLastBenefitTimestamp(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastBenefitTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastBenefitTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastBenefitTimestamp: %w", err)
	}
	return oldValue.LastBenefitTimestamp, nil
}

// AddLastBenefitTimestamp adds u to the "last_benefit_timestamp" field.
func (m *PlatformBenefitMutation) AddLastBenefitTimestamp(u int32) {
	if m.addlast_benefit_timestamp != nil {
		*m.addlast_benefit_timestamp += u
	} else {
		m.addlast_benefit_timestamp = &u
	}
}

// AddedLastBenefitTimestamp returns the value that was added to the "last_benefit_timestamp" field in this mutation.
func (m *PlatformBenefitMutation) AddedLastBenefitTimestamp() (r int32, exists bool) {
	v := m.addlast_benefit_timestamp
	if v == nil {
		return
	}
	return *v, true
}

// ResetLastBenefitTimestamp resets all changes to the "last_benefit_timestamp" field.
func (m *PlatformBenefitMutation) ResetLastBenefitTimestamp() {
	m.last_benefit_timestamp = nil
	m.addlast_benefit_timestamp = nil
}

// SetChainTransactionID sets the "chain_transaction_id" field.
func (m *PlatformBenefitMutation) SetChainTransactionID(s string) {
	m.chain_transaction_id = &s
}

// ChainTransactionID returns the value of the "chain_transaction_id" field in the mutation.
func (m *PlatformBenefitMutation) ChainTransactionID() (r string, exists bool) {
	v := m.chain_transaction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChainTransactionID returns the old "chain_transaction_id" field's value of the PlatformBenefit entity.
// If the PlatformBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformBenefitMutation) OldChainTransactionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChainTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChainTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChainTransactionID: %w", err)
	}
	return oldValue.ChainTransactionID, nil
}

// ResetChainTransactionID resets all changes to the "chain_transaction_id" field.
func (m *PlatformBenefitMutation) ResetChainTransactionID() {
	m.chain_transaction_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *PlatformBenefitMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *PlatformBenefitMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the PlatformBenefit entity.
// If the PlatformBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformBenefitMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *PlatformBenefitMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *PlatformBenefitMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *PlatformBenefitMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *PlatformBenefitMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *PlatformBenefitMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the PlatformBenefit entity.
// If the PlatformBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformBenefitMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *PlatformBenefitMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *PlatformBenefitMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *PlatformBenefitMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *PlatformBenefitMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *PlatformBenefitMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the PlatformBenefit entity.
// If the PlatformBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformBenefitMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *PlatformBenefitMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *PlatformBenefitMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *PlatformBenefitMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the PlatformBenefitMutation builder.
func (m *PlatformBenefitMutation) Where(ps ...predicate.PlatformBenefit) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PlatformBenefitMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PlatformBenefit).
func (m *PlatformBenefitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlatformBenefitMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.good_id != nil {
		fields = append(fields, platformbenefit.FieldGoodID)
	}
	if m.benefit_account_id != nil {
		fields = append(fields, platformbenefit.FieldBenefitAccountID)
	}
	if m.amount != nil {
		fields = append(fields, platformbenefit.FieldAmount)
	}
	if m.last_benefit_timestamp != nil {
		fields = append(fields, platformbenefit.FieldLastBenefitTimestamp)
	}
	if m.chain_transaction_id != nil {
		fields = append(fields, platformbenefit.FieldChainTransactionID)
	}
	if m.create_at != nil {
		fields = append(fields, platformbenefit.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, platformbenefit.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, platformbenefit.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlatformBenefitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case platformbenefit.FieldGoodID:
		return m.GoodID()
	case platformbenefit.FieldBenefitAccountID:
		return m.BenefitAccountID()
	case platformbenefit.FieldAmount:
		return m.Amount()
	case platformbenefit.FieldLastBenefitTimestamp:
		return m.LastBenefitTimestamp()
	case platformbenefit.FieldChainTransactionID:
		return m.ChainTransactionID()
	case platformbenefit.FieldCreateAt:
		return m.CreateAt()
	case platformbenefit.FieldUpdateAt:
		return m.UpdateAt()
	case platformbenefit.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlatformBenefitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case platformbenefit.FieldGoodID:
		return m.OldGoodID(ctx)
	case platformbenefit.FieldBenefitAccountID:
		return m.OldBenefitAccountID(ctx)
	case platformbenefit.FieldAmount:
		return m.OldAmount(ctx)
	case platformbenefit.FieldLastBenefitTimestamp:
		return m.OldLastBenefitTimestamp(ctx)
	case platformbenefit.FieldChainTransactionID:
		return m.OldChainTransactionID(ctx)
	case platformbenefit.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case platformbenefit.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case platformbenefit.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown PlatformBenefit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlatformBenefitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case platformbenefit.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case platformbenefit.FieldBenefitAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBenefitAccountID(v)
		return nil
	case platformbenefit.FieldAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case platformbenefit.FieldLastBenefitTimestamp:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastBenefitTimestamp(v)
		return nil
	case platformbenefit.FieldChainTransactionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChainTransactionID(v)
		return nil
	case platformbenefit.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case platformbenefit.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case platformbenefit.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown PlatformBenefit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlatformBenefitMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, platformbenefit.FieldAmount)
	}
	if m.addlast_benefit_timestamp != nil {
		fields = append(fields, platformbenefit.FieldLastBenefitTimestamp)
	}
	if m.addcreate_at != nil {
		fields = append(fields, platformbenefit.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, platformbenefit.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, platformbenefit.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlatformBenefitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case platformbenefit.FieldAmount:
		return m.AddedAmount()
	case platformbenefit.FieldLastBenefitTimestamp:
		return m.AddedLastBenefitTimestamp()
	case platformbenefit.FieldCreateAt:
		return m.AddedCreateAt()
	case platformbenefit.FieldUpdateAt:
		return m.AddedUpdateAt()
	case platformbenefit.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlatformBenefitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case platformbenefit.FieldAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case platformbenefit.FieldLastBenefitTimestamp:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastBenefitTimestamp(v)
		return nil
	case platformbenefit.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case platformbenefit.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case platformbenefit.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown PlatformBenefit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlatformBenefitMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlatformBenefitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlatformBenefitMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PlatformBenefit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlatformBenefitMutation) ResetField(name string) error {
	switch name {
	case platformbenefit.FieldGoodID:
		m.ResetGoodID()
		return nil
	case platformbenefit.FieldBenefitAccountID:
		m.ResetBenefitAccountID()
		return nil
	case platformbenefit.FieldAmount:
		m.ResetAmount()
		return nil
	case platformbenefit.FieldLastBenefitTimestamp:
		m.ResetLastBenefitTimestamp()
		return nil
	case platformbenefit.FieldChainTransactionID:
		m.ResetChainTransactionID()
		return nil
	case platformbenefit.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case platformbenefit.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case platformbenefit.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown PlatformBenefit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlatformBenefitMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlatformBenefitMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlatformBenefitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlatformBenefitMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlatformBenefitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlatformBenefitMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlatformBenefitMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PlatformBenefit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlatformBenefitMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PlatformBenefit edge %s", name)
}

// PlatformSettingMutation represents an operation that mutates the PlatformSetting nodes in the graph.
type PlatformSettingMutation struct {
	config
	op                                 Op
	typ                                string
	id                                 *uuid.UUID
	warm_account_usd_amount            *uint64
	addwarm_account_usd_amount         *int64
	payment_account_usd_amount         *uint64
	addpayment_account_usd_amount      *int64
	withdraw_auto_review_usd_amount    *uint64
	addwithdraw_auto_review_usd_amount *int64
	create_at                          *uint32
	addcreate_at                       *int32
	update_at                          *uint32
	addupdate_at                       *int32
	delete_at                          *uint32
	adddelete_at                       *int32
	clearedFields                      map[string]struct{}
	done                               bool
	oldValue                           func(context.Context) (*PlatformSetting, error)
	predicates                         []predicate.PlatformSetting
}

var _ ent.Mutation = (*PlatformSettingMutation)(nil)

// platformsettingOption allows management of the mutation configuration using functional options.
type platformsettingOption func(*PlatformSettingMutation)

// newPlatformSettingMutation creates new mutation for the PlatformSetting entity.
func newPlatformSettingMutation(c config, op Op, opts ...platformsettingOption) *PlatformSettingMutation {
	m := &PlatformSettingMutation{
		config:        c,
		op:            op,
		typ:           TypePlatformSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlatformSettingID sets the ID field of the mutation.
func withPlatformSettingID(id uuid.UUID) platformsettingOption {
	return func(m *PlatformSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *PlatformSetting
		)
		m.oldValue = func(ctx context.Context) (*PlatformSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PlatformSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlatformSetting sets the old PlatformSetting of the mutation.
func withPlatformSetting(node *PlatformSetting) platformsettingOption {
	return func(m *PlatformSettingMutation) {
		m.oldValue = func(context.Context) (*PlatformSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlatformSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlatformSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PlatformSetting entities.
func (m *PlatformSettingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlatformSettingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlatformSettingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PlatformSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetWarmAccountUsdAmount sets the "warm_account_usd_amount" field.
func (m *PlatformSettingMutation) SetWarmAccountUsdAmount(u uint64) {
	m.warm_account_usd_amount = &u
	m.addwarm_account_usd_amount = nil
}

// WarmAccountUsdAmount returns the value of the "warm_account_usd_amount" field in the mutation.
func (m *PlatformSettingMutation) WarmAccountUsdAmount() (r uint64, exists bool) {
	v := m.warm_account_usd_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldWarmAccountUsdAmount returns the old "warm_account_usd_amount" field's value of the PlatformSetting entity.
// If the PlatformSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformSettingMutation) OldWarmAccountUsdAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWarmAccountUsdAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWarmAccountUsdAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWarmAccountUsdAmount: %w", err)
	}
	return oldValue.WarmAccountUsdAmount, nil
}

// AddWarmAccountUsdAmount adds u to the "warm_account_usd_amount" field.
func (m *PlatformSettingMutation) AddWarmAccountUsdAmount(u int64) {
	if m.addwarm_account_usd_amount != nil {
		*m.addwarm_account_usd_amount += u
	} else {
		m.addwarm_account_usd_amount = &u
	}
}

// AddedWarmAccountUsdAmount returns the value that was added to the "warm_account_usd_amount" field in this mutation.
func (m *PlatformSettingMutation) AddedWarmAccountUsdAmount() (r int64, exists bool) {
	v := m.addwarm_account_usd_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetWarmAccountUsdAmount resets all changes to the "warm_account_usd_amount" field.
func (m *PlatformSettingMutation) ResetWarmAccountUsdAmount() {
	m.warm_account_usd_amount = nil
	m.addwarm_account_usd_amount = nil
}

// SetPaymentAccountUsdAmount sets the "payment_account_usd_amount" field.
func (m *PlatformSettingMutation) SetPaymentAccountUsdAmount(u uint64) {
	m.payment_account_usd_amount = &u
	m.addpayment_account_usd_amount = nil
}

// PaymentAccountUsdAmount returns the value of the "payment_account_usd_amount" field in the mutation.
func (m *PlatformSettingMutation) PaymentAccountUsdAmount() (r uint64, exists bool) {
	v := m.payment_account_usd_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentAccountUsdAmount returns the old "payment_account_usd_amount" field's value of the PlatformSetting entity.
// If the PlatformSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformSettingMutation) OldPaymentAccountUsdAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentAccountUsdAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentAccountUsdAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentAccountUsdAmount: %w", err)
	}
	return oldValue.PaymentAccountUsdAmount, nil
}

// AddPaymentAccountUsdAmount adds u to the "payment_account_usd_amount" field.
func (m *PlatformSettingMutation) AddPaymentAccountUsdAmount(u int64) {
	if m.addpayment_account_usd_amount != nil {
		*m.addpayment_account_usd_amount += u
	} else {
		m.addpayment_account_usd_amount = &u
	}
}

// AddedPaymentAccountUsdAmount returns the value that was added to the "payment_account_usd_amount" field in this mutation.
func (m *PlatformSettingMutation) AddedPaymentAccountUsdAmount() (r int64, exists bool) {
	v := m.addpayment_account_usd_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetPaymentAccountUsdAmount resets all changes to the "payment_account_usd_amount" field.
func (m *PlatformSettingMutation) ResetPaymentAccountUsdAmount() {
	m.payment_account_usd_amount = nil
	m.addpayment_account_usd_amount = nil
}

// SetWithdrawAutoReviewUsdAmount sets the "withdraw_auto_review_usd_amount" field.
func (m *PlatformSettingMutation) SetWithdrawAutoReviewUsdAmount(u uint64) {
	m.withdraw_auto_review_usd_amount = &u
	m.addwithdraw_auto_review_usd_amount = nil
}

// WithdrawAutoReviewUsdAmount returns the value of the "withdraw_auto_review_usd_amount" field in the mutation.
func (m *PlatformSettingMutation) WithdrawAutoReviewUsdAmount() (r uint64, exists bool) {
	v := m.withdraw_auto_review_usd_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldWithdrawAutoReviewUsdAmount returns the old "withdraw_auto_review_usd_amount" field's value of the PlatformSetting entity.
// If the PlatformSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformSettingMutation) OldWithdrawAutoReviewUsdAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWithdrawAutoReviewUsdAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWithdrawAutoReviewUsdAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWithdrawAutoReviewUsdAmount: %w", err)
	}
	return oldValue.WithdrawAutoReviewUsdAmount, nil
}

// AddWithdrawAutoReviewUsdAmount adds u to the "withdraw_auto_review_usd_amount" field.
func (m *PlatformSettingMutation) AddWithdrawAutoReviewUsdAmount(u int64) {
	if m.addwithdraw_auto_review_usd_amount != nil {
		*m.addwithdraw_auto_review_usd_amount += u
	} else {
		m.addwithdraw_auto_review_usd_amount = &u
	}
}

// AddedWithdrawAutoReviewUsdAmount returns the value that was added to the "withdraw_auto_review_usd_amount" field in this mutation.
func (m *PlatformSettingMutation) AddedWithdrawAutoReviewUsdAmount() (r int64, exists bool) {
	v := m.addwithdraw_auto_review_usd_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetWithdrawAutoReviewUsdAmount resets all changes to the "withdraw_auto_review_usd_amount" field.
func (m *PlatformSettingMutation) ResetWithdrawAutoReviewUsdAmount() {
	m.withdraw_auto_review_usd_amount = nil
	m.addwithdraw_auto_review_usd_amount = nil
}

// SetCreateAt sets the "create_at" field.
func (m *PlatformSettingMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *PlatformSettingMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the PlatformSetting entity.
// If the PlatformSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformSettingMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *PlatformSettingMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *PlatformSettingMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *PlatformSettingMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *PlatformSettingMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *PlatformSettingMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the PlatformSetting entity.
// If the PlatformSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformSettingMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *PlatformSettingMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *PlatformSettingMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *PlatformSettingMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *PlatformSettingMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *PlatformSettingMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the PlatformSetting entity.
// If the PlatformSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformSettingMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *PlatformSettingMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *PlatformSettingMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *PlatformSettingMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the PlatformSettingMutation builder.
func (m *PlatformSettingMutation) Where(ps ...predicate.PlatformSetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PlatformSettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PlatformSetting).
func (m *PlatformSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlatformSettingMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.warm_account_usd_amount != nil {
		fields = append(fields, platformsetting.FieldWarmAccountUsdAmount)
	}
	if m.payment_account_usd_amount != nil {
		fields = append(fields, platformsetting.FieldPaymentAccountUsdAmount)
	}
	if m.withdraw_auto_review_usd_amount != nil {
		fields = append(fields, platformsetting.FieldWithdrawAutoReviewUsdAmount)
	}
	if m.create_at != nil {
		fields = append(fields, platformsetting.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, platformsetting.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, platformsetting.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlatformSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case platformsetting.FieldWarmAccountUsdAmount:
		return m.WarmAccountUsdAmount()
	case platformsetting.FieldPaymentAccountUsdAmount:
		return m.PaymentAccountUsdAmount()
	case platformsetting.FieldWithdrawAutoReviewUsdAmount:
		return m.WithdrawAutoReviewUsdAmount()
	case platformsetting.FieldCreateAt:
		return m.CreateAt()
	case platformsetting.FieldUpdateAt:
		return m.UpdateAt()
	case platformsetting.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlatformSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case platformsetting.FieldWarmAccountUsdAmount:
		return m.OldWarmAccountUsdAmount(ctx)
	case platformsetting.FieldPaymentAccountUsdAmount:
		return m.OldPaymentAccountUsdAmount(ctx)
	case platformsetting.FieldWithdrawAutoReviewUsdAmount:
		return m.OldWithdrawAutoReviewUsdAmount(ctx)
	case platformsetting.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case platformsetting.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case platformsetting.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown PlatformSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlatformSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case platformsetting.FieldWarmAccountUsdAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWarmAccountUsdAmount(v)
		return nil
	case platformsetting.FieldPaymentAccountUsdAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentAccountUsdAmount(v)
		return nil
	case platformsetting.FieldWithdrawAutoReviewUsdAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWithdrawAutoReviewUsdAmount(v)
		return nil
	case platformsetting.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case platformsetting.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case platformsetting.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown PlatformSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlatformSettingMutation) AddedFields() []string {
	var fields []string
	if m.addwarm_account_usd_amount != nil {
		fields = append(fields, platformsetting.FieldWarmAccountUsdAmount)
	}
	if m.addpayment_account_usd_amount != nil {
		fields = append(fields, platformsetting.FieldPaymentAccountUsdAmount)
	}
	if m.addwithdraw_auto_review_usd_amount != nil {
		fields = append(fields, platformsetting.FieldWithdrawAutoReviewUsdAmount)
	}
	if m.addcreate_at != nil {
		fields = append(fields, platformsetting.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, platformsetting.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, platformsetting.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlatformSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case platformsetting.FieldWarmAccountUsdAmount:
		return m.AddedWarmAccountUsdAmount()
	case platformsetting.FieldPaymentAccountUsdAmount:
		return m.AddedPaymentAccountUsdAmount()
	case platformsetting.FieldWithdrawAutoReviewUsdAmount:
		return m.AddedWithdrawAutoReviewUsdAmount()
	case platformsetting.FieldCreateAt:
		return m.AddedCreateAt()
	case platformsetting.FieldUpdateAt:
		return m.AddedUpdateAt()
	case platformsetting.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlatformSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case platformsetting.FieldWarmAccountUsdAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWarmAccountUsdAmount(v)
		return nil
	case platformsetting.FieldPaymentAccountUsdAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPaymentAccountUsdAmount(v)
		return nil
	case platformsetting.FieldWithdrawAutoReviewUsdAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWithdrawAutoReviewUsdAmount(v)
		return nil
	case platformsetting.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case platformsetting.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case platformsetting.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown PlatformSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlatformSettingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlatformSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlatformSettingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PlatformSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlatformSettingMutation) ResetField(name string) error {
	switch name {
	case platformsetting.FieldWarmAccountUsdAmount:
		m.ResetWarmAccountUsdAmount()
		return nil
	case platformsetting.FieldPaymentAccountUsdAmount:
		m.ResetPaymentAccountUsdAmount()
		return nil
	case platformsetting.FieldWithdrawAutoReviewUsdAmount:
		m.ResetWithdrawAutoReviewUsdAmount()
		return nil
	case platformsetting.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case platformsetting.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case platformsetting.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown PlatformSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlatformSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlatformSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlatformSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlatformSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlatformSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlatformSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlatformSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PlatformSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlatformSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PlatformSetting edge %s", name)
}

// UserBenefitMutation represents an operation that mutates the UserBenefit nodes in the graph.
type UserBenefitMutation struct {
	config
	op                        Op
	typ                       string
	id                        *uuid.UUID
	app_id                    *uuid.UUID
	user_id                   *uuid.UUID
	good_id                   *uuid.UUID
	order_id                  *uuid.UUID
	coin_type_id              *uuid.UUID
	amount                    *uint64
	addamount                 *int64
	last_benefit_timestamp    *uint32
	addlast_benefit_timestamp *int32
	platform_transaction_id   *uuid.UUID
	create_at                 *uint32
	addcreate_at              *int32
	update_at                 *uint32
	addupdate_at              *int32
	delete_at                 *uint32
	adddelete_at              *int32
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*UserBenefit, error)
	predicates                []predicate.UserBenefit
}

var _ ent.Mutation = (*UserBenefitMutation)(nil)

// userbenefitOption allows management of the mutation configuration using functional options.
type userbenefitOption func(*UserBenefitMutation)

// newUserBenefitMutation creates new mutation for the UserBenefit entity.
func newUserBenefitMutation(c config, op Op, opts ...userbenefitOption) *UserBenefitMutation {
	m := &UserBenefitMutation{
		config:        c,
		op:            op,
		typ:           TypeUserBenefit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserBenefitID sets the ID field of the mutation.
func withUserBenefitID(id uuid.UUID) userbenefitOption {
	return func(m *UserBenefitMutation) {
		var (
			err   error
			once  sync.Once
			value *UserBenefit
		)
		m.oldValue = func(ctx context.Context) (*UserBenefit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserBenefit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserBenefit sets the old UserBenefit of the mutation.
func withUserBenefit(node *UserBenefit) userbenefitOption {
	return func(m *UserBenefitMutation) {
		m.oldValue = func(context.Context) (*UserBenefit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserBenefitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserBenefitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserBenefit entities.
func (m *UserBenefitMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserBenefitMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserBenefitMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserBenefit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *UserBenefitMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *UserBenefitMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *UserBenefitMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *UserBenefitMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserBenefitMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserBenefitMutation) ResetUserID() {
	m.user_id = nil
}

// SetGoodID sets the "good_id" field.
func (m *UserBenefitMutation) SetGoodID(u uuid.UUID) {
	m.good_id = &u
}

// GoodID returns the value of the "good_id" field in the mutation.
func (m *UserBenefitMutation) GoodID() (r uuid.UUID, exists bool) {
	v := m.good_id
	if v == nil {
		return
	}
	return *v, true
}

// OldGoodID returns the old "good_id" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldGoodID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoodID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoodID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoodID: %w", err)
	}
	return oldValue.GoodID, nil
}

// ResetGoodID resets all changes to the "good_id" field.
func (m *UserBenefitMutation) ResetGoodID() {
	m.good_id = nil
}

// SetOrderID sets the "order_id" field.
func (m *UserBenefitMutation) SetOrderID(u uuid.UUID) {
	m.order_id = &u
}

// OrderID returns the value of the "order_id" field in the mutation.
func (m *UserBenefitMutation) OrderID() (r uuid.UUID, exists bool) {
	v := m.order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderID returns the old "order_id" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderID: %w", err)
	}
	return oldValue.OrderID, nil
}

// ResetOrderID resets all changes to the "order_id" field.
func (m *UserBenefitMutation) ResetOrderID() {
	m.order_id = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *UserBenefitMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *UserBenefitMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *UserBenefitMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
}

// SetAmount sets the "amount" field.
func (m *UserBenefitMutation) SetAmount(u uint64) {
	m.amount = &u
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *UserBenefitMutation) Amount() (r uint64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds u to the "amount" field.
func (m *UserBenefitMutation) AddAmount(u int64) {
	if m.addamount != nil {
		*m.addamount += u
	} else {
		m.addamount = &u
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *UserBenefitMutation) AddedAmount() (r int64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *UserBenefitMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetLastBenefitTimestamp sets the "last_benefit_timestamp" field.
func (m *UserBenefitMutation) SetLastBenefitTimestamp(u uint32) {
	m.last_benefit_timestamp = &u
	m.addlast_benefit_timestamp = nil
}

// LastBenefitTimestamp returns the value of the "last_benefit_timestamp" field in the mutation.
func (m *UserBenefitMutation) LastBenefitTimestamp() (r uint32, exists bool) {
	v := m.last_benefit_timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldLastBenefitTimestamp returns the old "last_benefit_timestamp" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldLastBenefitTimestamp(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastBenefitTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastBenefitTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastBenefitTimestamp: %w", err)
	}
	return oldValue.LastBenefitTimestamp, nil
}

// AddLastBenefitTimestamp adds u to the "last_benefit_timestamp" field.
func (m *UserBenefitMutation) AddLastBenefitTimestamp(u int32) {
	if m.addlast_benefit_timestamp != nil {
		*m.addlast_benefit_timestamp += u
	} else {
		m.addlast_benefit_timestamp = &u
	}
}

// AddedLastBenefitTimestamp returns the value that was added to the "last_benefit_timestamp" field in this mutation.
func (m *UserBenefitMutation) AddedLastBenefitTimestamp() (r int32, exists bool) {
	v := m.addlast_benefit_timestamp
	if v == nil {
		return
	}
	return *v, true
}

// ResetLastBenefitTimestamp resets all changes to the "last_benefit_timestamp" field.
func (m *UserBenefitMutation) ResetLastBenefitTimestamp() {
	m.last_benefit_timestamp = nil
	m.addlast_benefit_timestamp = nil
}

// SetPlatformTransactionID sets the "platform_transaction_id" field.
func (m *UserBenefitMutation) SetPlatformTransactionID(u uuid.UUID) {
	m.platform_transaction_id = &u
}

// PlatformTransactionID returns the value of the "platform_transaction_id" field in the mutation.
func (m *UserBenefitMutation) PlatformTransactionID() (r uuid.UUID, exists bool) {
	v := m.platform_transaction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatformTransactionID returns the old "platform_transaction_id" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldPlatformTransactionID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatformTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatformTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatformTransactionID: %w", err)
	}
	return oldValue.PlatformTransactionID, nil
}

// ResetPlatformTransactionID resets all changes to the "platform_transaction_id" field.
func (m *UserBenefitMutation) ResetPlatformTransactionID() {
	m.platform_transaction_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *UserBenefitMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *UserBenefitMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *UserBenefitMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *UserBenefitMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *UserBenefitMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *UserBenefitMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *UserBenefitMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *UserBenefitMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *UserBenefitMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *UserBenefitMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *UserBenefitMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *UserBenefitMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the UserBenefit entity.
// If the UserBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserBenefitMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *UserBenefitMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *UserBenefitMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *UserBenefitMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the UserBenefitMutation builder.
func (m *UserBenefitMutation) Where(ps ...predicate.UserBenefit) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserBenefitMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserBenefit).
func (m *UserBenefitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserBenefitMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.app_id != nil {
		fields = append(fields, userbenefit.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, userbenefit.FieldUserID)
	}
	if m.good_id != nil {
		fields = append(fields, userbenefit.FieldGoodID)
	}
	if m.order_id != nil {
		fields = append(fields, userbenefit.FieldOrderID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, userbenefit.FieldCoinTypeID)
	}
	if m.amount != nil {
		fields = append(fields, userbenefit.FieldAmount)
	}
	if m.last_benefit_timestamp != nil {
		fields = append(fields, userbenefit.FieldLastBenefitTimestamp)
	}
	if m.platform_transaction_id != nil {
		fields = append(fields, userbenefit.FieldPlatformTransactionID)
	}
	if m.create_at != nil {
		fields = append(fields, userbenefit.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, userbenefit.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, userbenefit.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserBenefitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userbenefit.FieldAppID:
		return m.AppID()
	case userbenefit.FieldUserID:
		return m.UserID()
	case userbenefit.FieldGoodID:
		return m.GoodID()
	case userbenefit.FieldOrderID:
		return m.OrderID()
	case userbenefit.FieldCoinTypeID:
		return m.CoinTypeID()
	case userbenefit.FieldAmount:
		return m.Amount()
	case userbenefit.FieldLastBenefitTimestamp:
		return m.LastBenefitTimestamp()
	case userbenefit.FieldPlatformTransactionID:
		return m.PlatformTransactionID()
	case userbenefit.FieldCreateAt:
		return m.CreateAt()
	case userbenefit.FieldUpdateAt:
		return m.UpdateAt()
	case userbenefit.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserBenefitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userbenefit.FieldAppID:
		return m.OldAppID(ctx)
	case userbenefit.FieldUserID:
		return m.OldUserID(ctx)
	case userbenefit.FieldGoodID:
		return m.OldGoodID(ctx)
	case userbenefit.FieldOrderID:
		return m.OldOrderID(ctx)
	case userbenefit.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case userbenefit.FieldAmount:
		return m.OldAmount(ctx)
	case userbenefit.FieldLastBenefitTimestamp:
		return m.OldLastBenefitTimestamp(ctx)
	case userbenefit.FieldPlatformTransactionID:
		return m.OldPlatformTransactionID(ctx)
	case userbenefit.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case userbenefit.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case userbenefit.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserBenefit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserBenefitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userbenefit.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case userbenefit.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userbenefit.FieldGoodID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoodID(v)
		return nil
	case userbenefit.FieldOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderID(v)
		return nil
	case userbenefit.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case userbenefit.FieldAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case userbenefit.FieldLastBenefitTimestamp:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastBenefitTimestamp(v)
		return nil
	case userbenefit.FieldPlatformTransactionID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatformTransactionID(v)
		return nil
	case userbenefit.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case userbenefit.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case userbenefit.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserBenefit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserBenefitMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, userbenefit.FieldAmount)
	}
	if m.addlast_benefit_timestamp != nil {
		fields = append(fields, userbenefit.FieldLastBenefitTimestamp)
	}
	if m.addcreate_at != nil {
		fields = append(fields, userbenefit.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, userbenefit.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, userbenefit.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserBenefitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userbenefit.FieldAmount:
		return m.AddedAmount()
	case userbenefit.FieldLastBenefitTimestamp:
		return m.AddedLastBenefitTimestamp()
	case userbenefit.FieldCreateAt:
		return m.AddedCreateAt()
	case userbenefit.FieldUpdateAt:
		return m.AddedUpdateAt()
	case userbenefit.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserBenefitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userbenefit.FieldAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case userbenefit.FieldLastBenefitTimestamp:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastBenefitTimestamp(v)
		return nil
	case userbenefit.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case userbenefit.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case userbenefit.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserBenefit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserBenefitMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserBenefitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserBenefitMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserBenefit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserBenefitMutation) ResetField(name string) error {
	switch name {
	case userbenefit.FieldAppID:
		m.ResetAppID()
		return nil
	case userbenefit.FieldUserID:
		m.ResetUserID()
		return nil
	case userbenefit.FieldGoodID:
		m.ResetGoodID()
		return nil
	case userbenefit.FieldOrderID:
		m.ResetOrderID()
		return nil
	case userbenefit.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case userbenefit.FieldAmount:
		m.ResetAmount()
		return nil
	case userbenefit.FieldLastBenefitTimestamp:
		m.ResetLastBenefitTimestamp()
		return nil
	case userbenefit.FieldPlatformTransactionID:
		m.ResetPlatformTransactionID()
		return nil
	case userbenefit.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case userbenefit.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case userbenefit.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown UserBenefit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserBenefitMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserBenefitMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserBenefitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserBenefitMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserBenefitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserBenefitMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserBenefitMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserBenefit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserBenefitMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserBenefit edge %s", name)
}

// UserDirectBenefitMutation represents an operation that mutates the UserDirectBenefit nodes in the graph.
type UserDirectBenefitMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	app_id        *uuid.UUID
	user_id       *uuid.UUID
	coin_type_id  *uuid.UUID
	account_id    *uuid.UUID
	create_at     *uint32
	addcreate_at  *int32
	update_at     *uint32
	addupdate_at  *int32
	delete_at     *uint32
	adddelete_at  *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserDirectBenefit, error)
	predicates    []predicate.UserDirectBenefit
}

var _ ent.Mutation = (*UserDirectBenefitMutation)(nil)

// userdirectbenefitOption allows management of the mutation configuration using functional options.
type userdirectbenefitOption func(*UserDirectBenefitMutation)

// newUserDirectBenefitMutation creates new mutation for the UserDirectBenefit entity.
func newUserDirectBenefitMutation(c config, op Op, opts ...userdirectbenefitOption) *UserDirectBenefitMutation {
	m := &UserDirectBenefitMutation{
		config:        c,
		op:            op,
		typ:           TypeUserDirectBenefit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserDirectBenefitID sets the ID field of the mutation.
func withUserDirectBenefitID(id uuid.UUID) userdirectbenefitOption {
	return func(m *UserDirectBenefitMutation) {
		var (
			err   error
			once  sync.Once
			value *UserDirectBenefit
		)
		m.oldValue = func(ctx context.Context) (*UserDirectBenefit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserDirectBenefit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserDirectBenefit sets the old UserDirectBenefit of the mutation.
func withUserDirectBenefit(node *UserDirectBenefit) userdirectbenefitOption {
	return func(m *UserDirectBenefitMutation) {
		m.oldValue = func(context.Context) (*UserDirectBenefit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserDirectBenefitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserDirectBenefitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserDirectBenefit entities.
func (m *UserDirectBenefitMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserDirectBenefitMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserDirectBenefitMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserDirectBenefit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *UserDirectBenefitMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *UserDirectBenefitMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the UserDirectBenefit entity.
// If the UserDirectBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDirectBenefitMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *UserDirectBenefitMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *UserDirectBenefitMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserDirectBenefitMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserDirectBenefit entity.
// If the UserDirectBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDirectBenefitMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserDirectBenefitMutation) ResetUserID() {
	m.user_id = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *UserDirectBenefitMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *UserDirectBenefitMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the UserDirectBenefit entity.
// If the UserDirectBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDirectBenefitMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *UserDirectBenefitMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
}

// SetAccountID sets the "account_id" field.
func (m *UserDirectBenefitMutation) SetAccountID(u uuid.UUID) {
	m.account_id = &u
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *UserDirectBenefitMutation) AccountID() (r uuid.UUID, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the UserDirectBenefit entity.
// If the UserDirectBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDirectBenefitMutation) OldAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}
	return oldValue.AccountID, nil
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *UserDirectBenefitMutation) ResetAccountID() {
	m.account_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *UserDirectBenefitMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *UserDirectBenefitMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the UserDirectBenefit entity.
// If the UserDirectBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDirectBenefitMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *UserDirectBenefitMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *UserDirectBenefitMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *UserDirectBenefitMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *UserDirectBenefitMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *UserDirectBenefitMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the UserDirectBenefit entity.
// If the UserDirectBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDirectBenefitMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *UserDirectBenefitMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *UserDirectBenefitMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *UserDirectBenefitMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *UserDirectBenefitMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *UserDirectBenefitMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the UserDirectBenefit entity.
// If the UserDirectBenefit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserDirectBenefitMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *UserDirectBenefitMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *UserDirectBenefitMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *UserDirectBenefitMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the UserDirectBenefitMutation builder.
func (m *UserDirectBenefitMutation) Where(ps ...predicate.UserDirectBenefit) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserDirectBenefitMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserDirectBenefit).
func (m *UserDirectBenefitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserDirectBenefitMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.app_id != nil {
		fields = append(fields, userdirectbenefit.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, userdirectbenefit.FieldUserID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, userdirectbenefit.FieldCoinTypeID)
	}
	if m.account_id != nil {
		fields = append(fields, userdirectbenefit.FieldAccountID)
	}
	if m.create_at != nil {
		fields = append(fields, userdirectbenefit.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, userdirectbenefit.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, userdirectbenefit.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserDirectBenefitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userdirectbenefit.FieldAppID:
		return m.AppID()
	case userdirectbenefit.FieldUserID:
		return m.UserID()
	case userdirectbenefit.FieldCoinTypeID:
		return m.CoinTypeID()
	case userdirectbenefit.FieldAccountID:
		return m.AccountID()
	case userdirectbenefit.FieldCreateAt:
		return m.CreateAt()
	case userdirectbenefit.FieldUpdateAt:
		return m.UpdateAt()
	case userdirectbenefit.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserDirectBenefitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userdirectbenefit.FieldAppID:
		return m.OldAppID(ctx)
	case userdirectbenefit.FieldUserID:
		return m.OldUserID(ctx)
	case userdirectbenefit.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case userdirectbenefit.FieldAccountID:
		return m.OldAccountID(ctx)
	case userdirectbenefit.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case userdirectbenefit.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case userdirectbenefit.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserDirectBenefit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserDirectBenefitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userdirectbenefit.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case userdirectbenefit.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userdirectbenefit.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case userdirectbenefit.FieldAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountID(v)
		return nil
	case userdirectbenefit.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case userdirectbenefit.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case userdirectbenefit.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserDirectBenefit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserDirectBenefitMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, userdirectbenefit.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, userdirectbenefit.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, userdirectbenefit.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserDirectBenefitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userdirectbenefit.FieldCreateAt:
		return m.AddedCreateAt()
	case userdirectbenefit.FieldUpdateAt:
		return m.AddedUpdateAt()
	case userdirectbenefit.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserDirectBenefitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userdirectbenefit.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case userdirectbenefit.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case userdirectbenefit.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserDirectBenefit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserDirectBenefitMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserDirectBenefitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserDirectBenefitMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserDirectBenefit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserDirectBenefitMutation) ResetField(name string) error {
	switch name {
	case userdirectbenefit.FieldAppID:
		m.ResetAppID()
		return nil
	case userdirectbenefit.FieldUserID:
		m.ResetUserID()
		return nil
	case userdirectbenefit.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case userdirectbenefit.FieldAccountID:
		m.ResetAccountID()
		return nil
	case userdirectbenefit.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case userdirectbenefit.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case userdirectbenefit.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown UserDirectBenefit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserDirectBenefitMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserDirectBenefitMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserDirectBenefitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserDirectBenefitMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserDirectBenefitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserDirectBenefitMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserDirectBenefitMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserDirectBenefit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserDirectBenefitMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserDirectBenefit edge %s", name)
}

// UserPaymentBalanceMutation represents an operation that mutates the UserPaymentBalance nodes in the graph.
type UserPaymentBalanceMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	app_id               *uuid.UUID
	user_id              *uuid.UUID
	payment_id           *uuid.UUID
	used_by_payment_id   *uuid.UUID
	amount               *uint64
	addamount            *int64
	coin_usd_currency    *uint64
	addcoin_usd_currency *int64
	coin_type_id         *uuid.UUID
	create_at            *uint32
	addcreate_at         *int32
	update_at            *uint32
	addupdate_at         *int32
	delete_at            *uint32
	adddelete_at         *int32
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*UserPaymentBalance, error)
	predicates           []predicate.UserPaymentBalance
}

var _ ent.Mutation = (*UserPaymentBalanceMutation)(nil)

// userpaymentbalanceOption allows management of the mutation configuration using functional options.
type userpaymentbalanceOption func(*UserPaymentBalanceMutation)

// newUserPaymentBalanceMutation creates new mutation for the UserPaymentBalance entity.
func newUserPaymentBalanceMutation(c config, op Op, opts ...userpaymentbalanceOption) *UserPaymentBalanceMutation {
	m := &UserPaymentBalanceMutation{
		config:        c,
		op:            op,
		typ:           TypeUserPaymentBalance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserPaymentBalanceID sets the ID field of the mutation.
func withUserPaymentBalanceID(id uuid.UUID) userpaymentbalanceOption {
	return func(m *UserPaymentBalanceMutation) {
		var (
			err   error
			once  sync.Once
			value *UserPaymentBalance
		)
		m.oldValue = func(ctx context.Context) (*UserPaymentBalance, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserPaymentBalance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserPaymentBalance sets the old UserPaymentBalance of the mutation.
func withUserPaymentBalance(node *UserPaymentBalance) userpaymentbalanceOption {
	return func(m *UserPaymentBalanceMutation) {
		m.oldValue = func(context.Context) (*UserPaymentBalance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserPaymentBalanceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserPaymentBalanceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserPaymentBalance entities.
func (m *UserPaymentBalanceMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserPaymentBalanceMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserPaymentBalanceMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserPaymentBalance.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *UserPaymentBalanceMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *UserPaymentBalanceMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the UserPaymentBalance entity.
// If the UserPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPaymentBalanceMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *UserPaymentBalanceMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *UserPaymentBalanceMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserPaymentBalanceMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserPaymentBalance entity.
// If the UserPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPaymentBalanceMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserPaymentBalanceMutation) ResetUserID() {
	m.user_id = nil
}

// SetPaymentID sets the "payment_id" field.
func (m *UserPaymentBalanceMutation) SetPaymentID(u uuid.UUID) {
	m.payment_id = &u
}

// PaymentID returns the value of the "payment_id" field in the mutation.
func (m *UserPaymentBalanceMutation) PaymentID() (r uuid.UUID, exists bool) {
	v := m.payment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentID returns the old "payment_id" field's value of the UserPaymentBalance entity.
// If the UserPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPaymentBalanceMutation) OldPaymentID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentID: %w", err)
	}
	return oldValue.PaymentID, nil
}

// ResetPaymentID resets all changes to the "payment_id" field.
func (m *UserPaymentBalanceMutation) ResetPaymentID() {
	m.payment_id = nil
}

// SetUsedByPaymentID sets the "used_by_payment_id" field.
func (m *UserPaymentBalanceMutation) SetUsedByPaymentID(u uuid.UUID) {
	m.used_by_payment_id = &u
}

// UsedByPaymentID returns the value of the "used_by_payment_id" field in the mutation.
func (m *UserPaymentBalanceMutation) UsedByPaymentID() (r uuid.UUID, exists bool) {
	v := m.used_by_payment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUsedByPaymentID returns the old "used_by_payment_id" field's value of the UserPaymentBalance entity.
// If the UserPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPaymentBalanceMutation) OldUsedByPaymentID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsedByPaymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsedByPaymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsedByPaymentID: %w", err)
	}
	return oldValue.UsedByPaymentID, nil
}

// ResetUsedByPaymentID resets all changes to the "used_by_payment_id" field.
func (m *UserPaymentBalanceMutation) ResetUsedByPaymentID() {
	m.used_by_payment_id = nil
}

// SetAmount sets the "amount" field.
func (m *UserPaymentBalanceMutation) SetAmount(u uint64) {
	m.amount = &u
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *UserPaymentBalanceMutation) Amount() (r uint64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the UserPaymentBalance entity.
// If the UserPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPaymentBalanceMutation) OldAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds u to the "amount" field.
func (m *UserPaymentBalanceMutation) AddAmount(u int64) {
	if m.addamount != nil {
		*m.addamount += u
	} else {
		m.addamount = &u
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *UserPaymentBalanceMutation) AddedAmount() (r int64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *UserPaymentBalanceMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetCoinUsdCurrency sets the "coin_usd_currency" field.
func (m *UserPaymentBalanceMutation) SetCoinUsdCurrency(u uint64) {
	m.coin_usd_currency = &u
	m.addcoin_usd_currency = nil
}

// CoinUsdCurrency returns the value of the "coin_usd_currency" field in the mutation.
func (m *UserPaymentBalanceMutation) CoinUsdCurrency() (r uint64, exists bool) {
	v := m.coin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinUsdCurrency returns the old "coin_usd_currency" field's value of the UserPaymentBalance entity.
// If the UserPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPaymentBalanceMutation) OldCoinUsdCurrency(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinUsdCurrency is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinUsdCurrency requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinUsdCurrency: %w", err)
	}
	return oldValue.CoinUsdCurrency, nil
}

// AddCoinUsdCurrency adds u to the "coin_usd_currency" field.
func (m *UserPaymentBalanceMutation) AddCoinUsdCurrency(u int64) {
	if m.addcoin_usd_currency != nil {
		*m.addcoin_usd_currency += u
	} else {
		m.addcoin_usd_currency = &u
	}
}

// AddedCoinUsdCurrency returns the value that was added to the "coin_usd_currency" field in this mutation.
func (m *UserPaymentBalanceMutation) AddedCoinUsdCurrency() (r int64, exists bool) {
	v := m.addcoin_usd_currency
	if v == nil {
		return
	}
	return *v, true
}

// ResetCoinUsdCurrency resets all changes to the "coin_usd_currency" field.
func (m *UserPaymentBalanceMutation) ResetCoinUsdCurrency() {
	m.coin_usd_currency = nil
	m.addcoin_usd_currency = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *UserPaymentBalanceMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *UserPaymentBalanceMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the UserPaymentBalance entity.
// If the UserPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPaymentBalanceMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *UserPaymentBalanceMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *UserPaymentBalanceMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *UserPaymentBalanceMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the UserPaymentBalance entity.
// If the UserPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPaymentBalanceMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *UserPaymentBalanceMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *UserPaymentBalanceMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *UserPaymentBalanceMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *UserPaymentBalanceMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *UserPaymentBalanceMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the UserPaymentBalance entity.
// If the UserPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPaymentBalanceMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *UserPaymentBalanceMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *UserPaymentBalanceMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *UserPaymentBalanceMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *UserPaymentBalanceMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *UserPaymentBalanceMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the UserPaymentBalance entity.
// If the UserPaymentBalance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserPaymentBalanceMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *UserPaymentBalanceMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *UserPaymentBalanceMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *UserPaymentBalanceMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the UserPaymentBalanceMutation builder.
func (m *UserPaymentBalanceMutation) Where(ps ...predicate.UserPaymentBalance) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserPaymentBalanceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserPaymentBalance).
func (m *UserPaymentBalanceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserPaymentBalanceMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.app_id != nil {
		fields = append(fields, userpaymentbalance.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, userpaymentbalance.FieldUserID)
	}
	if m.payment_id != nil {
		fields = append(fields, userpaymentbalance.FieldPaymentID)
	}
	if m.used_by_payment_id != nil {
		fields = append(fields, userpaymentbalance.FieldUsedByPaymentID)
	}
	if m.amount != nil {
		fields = append(fields, userpaymentbalance.FieldAmount)
	}
	if m.coin_usd_currency != nil {
		fields = append(fields, userpaymentbalance.FieldCoinUsdCurrency)
	}
	if m.coin_type_id != nil {
		fields = append(fields, userpaymentbalance.FieldCoinTypeID)
	}
	if m.create_at != nil {
		fields = append(fields, userpaymentbalance.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, userpaymentbalance.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, userpaymentbalance.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserPaymentBalanceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userpaymentbalance.FieldAppID:
		return m.AppID()
	case userpaymentbalance.FieldUserID:
		return m.UserID()
	case userpaymentbalance.FieldPaymentID:
		return m.PaymentID()
	case userpaymentbalance.FieldUsedByPaymentID:
		return m.UsedByPaymentID()
	case userpaymentbalance.FieldAmount:
		return m.Amount()
	case userpaymentbalance.FieldCoinUsdCurrency:
		return m.CoinUsdCurrency()
	case userpaymentbalance.FieldCoinTypeID:
		return m.CoinTypeID()
	case userpaymentbalance.FieldCreateAt:
		return m.CreateAt()
	case userpaymentbalance.FieldUpdateAt:
		return m.UpdateAt()
	case userpaymentbalance.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserPaymentBalanceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userpaymentbalance.FieldAppID:
		return m.OldAppID(ctx)
	case userpaymentbalance.FieldUserID:
		return m.OldUserID(ctx)
	case userpaymentbalance.FieldPaymentID:
		return m.OldPaymentID(ctx)
	case userpaymentbalance.FieldUsedByPaymentID:
		return m.OldUsedByPaymentID(ctx)
	case userpaymentbalance.FieldAmount:
		return m.OldAmount(ctx)
	case userpaymentbalance.FieldCoinUsdCurrency:
		return m.OldCoinUsdCurrency(ctx)
	case userpaymentbalance.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case userpaymentbalance.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case userpaymentbalance.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case userpaymentbalance.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserPaymentBalance field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPaymentBalanceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userpaymentbalance.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case userpaymentbalance.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userpaymentbalance.FieldPaymentID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentID(v)
		return nil
	case userpaymentbalance.FieldUsedByPaymentID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsedByPaymentID(v)
		return nil
	case userpaymentbalance.FieldAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case userpaymentbalance.FieldCoinUsdCurrency:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinUsdCurrency(v)
		return nil
	case userpaymentbalance.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case userpaymentbalance.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case userpaymentbalance.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case userpaymentbalance.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserPaymentBalance field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserPaymentBalanceMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, userpaymentbalance.FieldAmount)
	}
	if m.addcoin_usd_currency != nil {
		fields = append(fields, userpaymentbalance.FieldCoinUsdCurrency)
	}
	if m.addcreate_at != nil {
		fields = append(fields, userpaymentbalance.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, userpaymentbalance.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, userpaymentbalance.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserPaymentBalanceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userpaymentbalance.FieldAmount:
		return m.AddedAmount()
	case userpaymentbalance.FieldCoinUsdCurrency:
		return m.AddedCoinUsdCurrency()
	case userpaymentbalance.FieldCreateAt:
		return m.AddedCreateAt()
	case userpaymentbalance.FieldUpdateAt:
		return m.AddedUpdateAt()
	case userpaymentbalance.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserPaymentBalanceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userpaymentbalance.FieldAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case userpaymentbalance.FieldCoinUsdCurrency:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCoinUsdCurrency(v)
		return nil
	case userpaymentbalance.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case userpaymentbalance.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case userpaymentbalance.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserPaymentBalance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserPaymentBalanceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserPaymentBalanceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserPaymentBalanceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserPaymentBalance nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserPaymentBalanceMutation) ResetField(name string) error {
	switch name {
	case userpaymentbalance.FieldAppID:
		m.ResetAppID()
		return nil
	case userpaymentbalance.FieldUserID:
		m.ResetUserID()
		return nil
	case userpaymentbalance.FieldPaymentID:
		m.ResetPaymentID()
		return nil
	case userpaymentbalance.FieldUsedByPaymentID:
		m.ResetUsedByPaymentID()
		return nil
	case userpaymentbalance.FieldAmount:
		m.ResetAmount()
		return nil
	case userpaymentbalance.FieldCoinUsdCurrency:
		m.ResetCoinUsdCurrency()
		return nil
	case userpaymentbalance.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case userpaymentbalance.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case userpaymentbalance.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case userpaymentbalance.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown UserPaymentBalance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserPaymentBalanceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserPaymentBalanceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserPaymentBalanceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserPaymentBalanceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserPaymentBalanceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserPaymentBalanceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserPaymentBalanceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserPaymentBalance unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserPaymentBalanceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserPaymentBalance edge %s", name)
}

// UserWithdrawMutation represents an operation that mutates the UserWithdraw nodes in the graph.
type UserWithdrawMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	app_id        *uuid.UUID
	user_id       *uuid.UUID
	name          *string
	message       *string
	labels        *[]string
	coin_type_id  *uuid.UUID
	account_id    *uuid.UUID
	create_at     *uint32
	addcreate_at  *int32
	update_at     *uint32
	addupdate_at  *int32
	delete_at     *uint32
	adddelete_at  *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*UserWithdraw, error)
	predicates    []predicate.UserWithdraw
}

var _ ent.Mutation = (*UserWithdrawMutation)(nil)

// userwithdrawOption allows management of the mutation configuration using functional options.
type userwithdrawOption func(*UserWithdrawMutation)

// newUserWithdrawMutation creates new mutation for the UserWithdraw entity.
func newUserWithdrawMutation(c config, op Op, opts ...userwithdrawOption) *UserWithdrawMutation {
	m := &UserWithdrawMutation{
		config:        c,
		op:            op,
		typ:           TypeUserWithdraw,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserWithdrawID sets the ID field of the mutation.
func withUserWithdrawID(id uuid.UUID) userwithdrawOption {
	return func(m *UserWithdrawMutation) {
		var (
			err   error
			once  sync.Once
			value *UserWithdraw
		)
		m.oldValue = func(ctx context.Context) (*UserWithdraw, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserWithdraw.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserWithdraw sets the old UserWithdraw of the mutation.
func withUserWithdraw(node *UserWithdraw) userwithdrawOption {
	return func(m *UserWithdrawMutation) {
		m.oldValue = func(context.Context) (*UserWithdraw, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserWithdrawMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserWithdrawMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserWithdraw entities.
func (m *UserWithdrawMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserWithdrawMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserWithdrawMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserWithdraw.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *UserWithdrawMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *UserWithdrawMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the UserWithdraw entity.
// If the UserWithdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *UserWithdrawMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *UserWithdrawMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserWithdrawMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserWithdraw entity.
// If the UserWithdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserWithdrawMutation) ResetUserID() {
	m.user_id = nil
}

// SetName sets the "name" field.
func (m *UserWithdrawMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserWithdrawMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the UserWithdraw entity.
// If the UserWithdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserWithdrawMutation) ResetName() {
	m.name = nil
}

// SetMessage sets the "message" field.
func (m *UserWithdrawMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *UserWithdrawMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the UserWithdraw entity.
// If the UserWithdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *UserWithdrawMutation) ResetMessage() {
	m.message = nil
}

// SetLabels sets the "labels" field.
func (m *UserWithdrawMutation) SetLabels(s []string) {
	m.labels = &s
}

// Labels returns the value of the "labels" field in the mutation.
func (m *UserWithdrawMutation) Labels() (r []string, exists bool) {
	v := m.labels
	if v == nil {
		return
	}
	return *v, true
}

// OldLabels returns the old "labels" field's value of the UserWithdraw entity.
// If the UserWithdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawMutation) OldLabels(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabels is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabels requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabels: %w", err)
	}
	return oldValue.Labels, nil
}

// ResetLabels resets all changes to the "labels" field.
func (m *UserWithdrawMutation) ResetLabels() {
	m.labels = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *UserWithdrawMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *UserWithdrawMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the UserWithdraw entity.
// If the UserWithdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *UserWithdrawMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
}

// SetAccountID sets the "account_id" field.
func (m *UserWithdrawMutation) SetAccountID(u uuid.UUID) {
	m.account_id = &u
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *UserWithdrawMutation) AccountID() (r uuid.UUID, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the UserWithdraw entity.
// If the UserWithdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawMutation) OldAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}
	return oldValue.AccountID, nil
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *UserWithdrawMutation) ResetAccountID() {
	m.account_id = nil
}

// SetCreateAt sets the "create_at" field.
func (m *UserWithdrawMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *UserWithdrawMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the UserWithdraw entity.
// If the UserWithdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *UserWithdrawMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *UserWithdrawMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *UserWithdrawMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *UserWithdrawMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *UserWithdrawMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the UserWithdraw entity.
// If the UserWithdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *UserWithdrawMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *UserWithdrawMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *UserWithdrawMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *UserWithdrawMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *UserWithdrawMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the UserWithdraw entity.
// If the UserWithdraw object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *UserWithdrawMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *UserWithdrawMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *UserWithdrawMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the UserWithdrawMutation builder.
func (m *UserWithdrawMutation) Where(ps ...predicate.UserWithdraw) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserWithdrawMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserWithdraw).
func (m *UserWithdrawMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserWithdrawMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.app_id != nil {
		fields = append(fields, userwithdraw.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, userwithdraw.FieldUserID)
	}
	if m.name != nil {
		fields = append(fields, userwithdraw.FieldName)
	}
	if m.message != nil {
		fields = append(fields, userwithdraw.FieldMessage)
	}
	if m.labels != nil {
		fields = append(fields, userwithdraw.FieldLabels)
	}
	if m.coin_type_id != nil {
		fields = append(fields, userwithdraw.FieldCoinTypeID)
	}
	if m.account_id != nil {
		fields = append(fields, userwithdraw.FieldAccountID)
	}
	if m.create_at != nil {
		fields = append(fields, userwithdraw.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, userwithdraw.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, userwithdraw.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserWithdrawMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userwithdraw.FieldAppID:
		return m.AppID()
	case userwithdraw.FieldUserID:
		return m.UserID()
	case userwithdraw.FieldName:
		return m.Name()
	case userwithdraw.FieldMessage:
		return m.Message()
	case userwithdraw.FieldLabels:
		return m.Labels()
	case userwithdraw.FieldCoinTypeID:
		return m.CoinTypeID()
	case userwithdraw.FieldAccountID:
		return m.AccountID()
	case userwithdraw.FieldCreateAt:
		return m.CreateAt()
	case userwithdraw.FieldUpdateAt:
		return m.UpdateAt()
	case userwithdraw.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserWithdrawMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userwithdraw.FieldAppID:
		return m.OldAppID(ctx)
	case userwithdraw.FieldUserID:
		return m.OldUserID(ctx)
	case userwithdraw.FieldName:
		return m.OldName(ctx)
	case userwithdraw.FieldMessage:
		return m.OldMessage(ctx)
	case userwithdraw.FieldLabels:
		return m.OldLabels(ctx)
	case userwithdraw.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case userwithdraw.FieldAccountID:
		return m.OldAccountID(ctx)
	case userwithdraw.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case userwithdraw.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case userwithdraw.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserWithdraw field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserWithdrawMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userwithdraw.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case userwithdraw.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userwithdraw.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case userwithdraw.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case userwithdraw.FieldLabels:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabels(v)
		return nil
	case userwithdraw.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case userwithdraw.FieldAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountID(v)
		return nil
	case userwithdraw.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case userwithdraw.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case userwithdraw.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserWithdraw field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserWithdrawMutation) AddedFields() []string {
	var fields []string
	if m.addcreate_at != nil {
		fields = append(fields, userwithdraw.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, userwithdraw.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, userwithdraw.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserWithdrawMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userwithdraw.FieldCreateAt:
		return m.AddedCreateAt()
	case userwithdraw.FieldUpdateAt:
		return m.AddedUpdateAt()
	case userwithdraw.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserWithdrawMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userwithdraw.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case userwithdraw.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case userwithdraw.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserWithdraw numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserWithdrawMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserWithdrawMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserWithdrawMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserWithdraw nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserWithdrawMutation) ResetField(name string) error {
	switch name {
	case userwithdraw.FieldAppID:
		m.ResetAppID()
		return nil
	case userwithdraw.FieldUserID:
		m.ResetUserID()
		return nil
	case userwithdraw.FieldName:
		m.ResetName()
		return nil
	case userwithdraw.FieldMessage:
		m.ResetMessage()
		return nil
	case userwithdraw.FieldLabels:
		m.ResetLabels()
		return nil
	case userwithdraw.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case userwithdraw.FieldAccountID:
		m.ResetAccountID()
		return nil
	case userwithdraw.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case userwithdraw.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case userwithdraw.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown UserWithdraw field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserWithdrawMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserWithdrawMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserWithdrawMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserWithdrawMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserWithdrawMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserWithdrawMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserWithdrawMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserWithdraw unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserWithdrawMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserWithdraw edge %s", name)
}

// UserWithdrawItemMutation represents an operation that mutates the UserWithdrawItem nodes in the graph.
type UserWithdrawItemMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	app_id                  *uuid.UUID
	user_id                 *uuid.UUID
	coin_type_id            *uuid.UUID
	withdraw_to_account_id  *uuid.UUID
	amount                  *uint64
	addamount               *int64
	platform_transaction_id *uuid.UUID
	withdraw_type           *string
	exempt_fee              *bool
	create_at               *uint32
	addcreate_at            *int32
	update_at               *uint32
	addupdate_at            *int32
	delete_at               *uint32
	adddelete_at            *int32
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*UserWithdrawItem, error)
	predicates              []predicate.UserWithdrawItem
}

var _ ent.Mutation = (*UserWithdrawItemMutation)(nil)

// userwithdrawitemOption allows management of the mutation configuration using functional options.
type userwithdrawitemOption func(*UserWithdrawItemMutation)

// newUserWithdrawItemMutation creates new mutation for the UserWithdrawItem entity.
func newUserWithdrawItemMutation(c config, op Op, opts ...userwithdrawitemOption) *UserWithdrawItemMutation {
	m := &UserWithdrawItemMutation{
		config:        c,
		op:            op,
		typ:           TypeUserWithdrawItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserWithdrawItemID sets the ID field of the mutation.
func withUserWithdrawItemID(id uuid.UUID) userwithdrawitemOption {
	return func(m *UserWithdrawItemMutation) {
		var (
			err   error
			once  sync.Once
			value *UserWithdrawItem
		)
		m.oldValue = func(ctx context.Context) (*UserWithdrawItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserWithdrawItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserWithdrawItem sets the old UserWithdrawItem of the mutation.
func withUserWithdrawItem(node *UserWithdrawItem) userwithdrawitemOption {
	return func(m *UserWithdrawItemMutation) {
		m.oldValue = func(context.Context) (*UserWithdrawItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserWithdrawItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserWithdrawItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserWithdrawItem entities.
func (m *UserWithdrawItemMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserWithdrawItemMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserWithdrawItemMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserWithdrawItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *UserWithdrawItemMutation) SetAppID(u uuid.UUID) {
	m.app_id = &u
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *UserWithdrawItemMutation) AppID() (r uuid.UUID, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the UserWithdrawItem entity.
// If the UserWithdrawItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawItemMutation) OldAppID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *UserWithdrawItemMutation) ResetAppID() {
	m.app_id = nil
}

// SetUserID sets the "user_id" field.
func (m *UserWithdrawItemMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserWithdrawItemMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserWithdrawItem entity.
// If the UserWithdrawItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawItemMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserWithdrawItemMutation) ResetUserID() {
	m.user_id = nil
}

// SetCoinTypeID sets the "coin_type_id" field.
func (m *UserWithdrawItemMutation) SetCoinTypeID(u uuid.UUID) {
	m.coin_type_id = &u
}

// CoinTypeID returns the value of the "coin_type_id" field in the mutation.
func (m *UserWithdrawItemMutation) CoinTypeID() (r uuid.UUID, exists bool) {
	v := m.coin_type_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCoinTypeID returns the old "coin_type_id" field's value of the UserWithdrawItem entity.
// If the UserWithdrawItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawItemMutation) OldCoinTypeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoinTypeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoinTypeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoinTypeID: %w", err)
	}
	return oldValue.CoinTypeID, nil
}

// ResetCoinTypeID resets all changes to the "coin_type_id" field.
func (m *UserWithdrawItemMutation) ResetCoinTypeID() {
	m.coin_type_id = nil
}

// SetWithdrawToAccountID sets the "withdraw_to_account_id" field.
func (m *UserWithdrawItemMutation) SetWithdrawToAccountID(u uuid.UUID) {
	m.withdraw_to_account_id = &u
}

// WithdrawToAccountID returns the value of the "withdraw_to_account_id" field in the mutation.
func (m *UserWithdrawItemMutation) WithdrawToAccountID() (r uuid.UUID, exists bool) {
	v := m.withdraw_to_account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWithdrawToAccountID returns the old "withdraw_to_account_id" field's value of the UserWithdrawItem entity.
// If the UserWithdrawItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawItemMutation) OldWithdrawToAccountID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWithdrawToAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWithdrawToAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWithdrawToAccountID: %w", err)
	}
	return oldValue.WithdrawToAccountID, nil
}

// ResetWithdrawToAccountID resets all changes to the "withdraw_to_account_id" field.
func (m *UserWithdrawItemMutation) ResetWithdrawToAccountID() {
	m.withdraw_to_account_id = nil
}

// SetAmount sets the "amount" field.
func (m *UserWithdrawItemMutation) SetAmount(u uint64) {
	m.amount = &u
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *UserWithdrawItemMutation) Amount() (r uint64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the UserWithdrawItem entity.
// If the UserWithdrawItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawItemMutation) OldAmount(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds u to the "amount" field.
func (m *UserWithdrawItemMutation) AddAmount(u int64) {
	if m.addamount != nil {
		*m.addamount += u
	} else {
		m.addamount = &u
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *UserWithdrawItemMutation) AddedAmount() (r int64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *UserWithdrawItemMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetPlatformTransactionID sets the "platform_transaction_id" field.
func (m *UserWithdrawItemMutation) SetPlatformTransactionID(u uuid.UUID) {
	m.platform_transaction_id = &u
}

// PlatformTransactionID returns the value of the "platform_transaction_id" field in the mutation.
func (m *UserWithdrawItemMutation) PlatformTransactionID() (r uuid.UUID, exists bool) {
	v := m.platform_transaction_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatformTransactionID returns the old "platform_transaction_id" field's value of the UserWithdrawItem entity.
// If the UserWithdrawItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawItemMutation) OldPlatformTransactionID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatformTransactionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatformTransactionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatformTransactionID: %w", err)
	}
	return oldValue.PlatformTransactionID, nil
}

// ResetPlatformTransactionID resets all changes to the "platform_transaction_id" field.
func (m *UserWithdrawItemMutation) ResetPlatformTransactionID() {
	m.platform_transaction_id = nil
}

// SetWithdrawType sets the "withdraw_type" field.
func (m *UserWithdrawItemMutation) SetWithdrawType(s string) {
	m.withdraw_type = &s
}

// WithdrawType returns the value of the "withdraw_type" field in the mutation.
func (m *UserWithdrawItemMutation) WithdrawType() (r string, exists bool) {
	v := m.withdraw_type
	if v == nil {
		return
	}
	return *v, true
}

// OldWithdrawType returns the old "withdraw_type" field's value of the UserWithdrawItem entity.
// If the UserWithdrawItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawItemMutation) OldWithdrawType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWithdrawType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWithdrawType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWithdrawType: %w", err)
	}
	return oldValue.WithdrawType, nil
}

// ResetWithdrawType resets all changes to the "withdraw_type" field.
func (m *UserWithdrawItemMutation) ResetWithdrawType() {
	m.withdraw_type = nil
}

// SetExemptFee sets the "exempt_fee" field.
func (m *UserWithdrawItemMutation) SetExemptFee(b bool) {
	m.exempt_fee = &b
}

// ExemptFee returns the value of the "exempt_fee" field in the mutation.
func (m *UserWithdrawItemMutation) ExemptFee() (r bool, exists bool) {
	v := m.exempt_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldExemptFee returns the old "exempt_fee" field's value of the UserWithdrawItem entity.
// If the UserWithdrawItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawItemMutation) OldExemptFee(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExemptFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExemptFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExemptFee: %w", err)
	}
	return oldValue.ExemptFee, nil
}

// ResetExemptFee resets all changes to the "exempt_fee" field.
func (m *UserWithdrawItemMutation) ResetExemptFee() {
	m.exempt_fee = nil
}

// SetCreateAt sets the "create_at" field.
func (m *UserWithdrawItemMutation) SetCreateAt(u uint32) {
	m.create_at = &u
	m.addcreate_at = nil
}

// CreateAt returns the value of the "create_at" field in the mutation.
func (m *UserWithdrawItemMutation) CreateAt() (r uint32, exists bool) {
	v := m.create_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateAt returns the old "create_at" field's value of the UserWithdrawItem entity.
// If the UserWithdrawItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawItemMutation) OldCreateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateAt: %w", err)
	}
	return oldValue.CreateAt, nil
}

// AddCreateAt adds u to the "create_at" field.
func (m *UserWithdrawItemMutation) AddCreateAt(u int32) {
	if m.addcreate_at != nil {
		*m.addcreate_at += u
	} else {
		m.addcreate_at = &u
	}
}

// AddedCreateAt returns the value that was added to the "create_at" field in this mutation.
func (m *UserWithdrawItemMutation) AddedCreateAt() (r int32, exists bool) {
	v := m.addcreate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateAt resets all changes to the "create_at" field.
func (m *UserWithdrawItemMutation) ResetCreateAt() {
	m.create_at = nil
	m.addcreate_at = nil
}

// SetUpdateAt sets the "update_at" field.
func (m *UserWithdrawItemMutation) SetUpdateAt(u uint32) {
	m.update_at = &u
	m.addupdate_at = nil
}

// UpdateAt returns the value of the "update_at" field in the mutation.
func (m *UserWithdrawItemMutation) UpdateAt() (r uint32, exists bool) {
	v := m.update_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateAt returns the old "update_at" field's value of the UserWithdrawItem entity.
// If the UserWithdrawItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawItemMutation) OldUpdateAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateAt: %w", err)
	}
	return oldValue.UpdateAt, nil
}

// AddUpdateAt adds u to the "update_at" field.
func (m *UserWithdrawItemMutation) AddUpdateAt(u int32) {
	if m.addupdate_at != nil {
		*m.addupdate_at += u
	} else {
		m.addupdate_at = &u
	}
}

// AddedUpdateAt returns the value that was added to the "update_at" field in this mutation.
func (m *UserWithdrawItemMutation) AddedUpdateAt() (r int32, exists bool) {
	v := m.addupdate_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdateAt resets all changes to the "update_at" field.
func (m *UserWithdrawItemMutation) ResetUpdateAt() {
	m.update_at = nil
	m.addupdate_at = nil
}

// SetDeleteAt sets the "delete_at" field.
func (m *UserWithdrawItemMutation) SetDeleteAt(u uint32) {
	m.delete_at = &u
	m.adddelete_at = nil
}

// DeleteAt returns the value of the "delete_at" field in the mutation.
func (m *UserWithdrawItemMutation) DeleteAt() (r uint32, exists bool) {
	v := m.delete_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteAt returns the old "delete_at" field's value of the UserWithdrawItem entity.
// If the UserWithdrawItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserWithdrawItemMutation) OldDeleteAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteAt: %w", err)
	}
	return oldValue.DeleteAt, nil
}

// AddDeleteAt adds u to the "delete_at" field.
func (m *UserWithdrawItemMutation) AddDeleteAt(u int32) {
	if m.adddelete_at != nil {
		*m.adddelete_at += u
	} else {
		m.adddelete_at = &u
	}
}

// AddedDeleteAt returns the value that was added to the "delete_at" field in this mutation.
func (m *UserWithdrawItemMutation) AddedDeleteAt() (r int32, exists bool) {
	v := m.adddelete_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeleteAt resets all changes to the "delete_at" field.
func (m *UserWithdrawItemMutation) ResetDeleteAt() {
	m.delete_at = nil
	m.adddelete_at = nil
}

// Where appends a list predicates to the UserWithdrawItemMutation builder.
func (m *UserWithdrawItemMutation) Where(ps ...predicate.UserWithdrawItem) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserWithdrawItemMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserWithdrawItem).
func (m *UserWithdrawItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserWithdrawItemMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.app_id != nil {
		fields = append(fields, userwithdrawitem.FieldAppID)
	}
	if m.user_id != nil {
		fields = append(fields, userwithdrawitem.FieldUserID)
	}
	if m.coin_type_id != nil {
		fields = append(fields, userwithdrawitem.FieldCoinTypeID)
	}
	if m.withdraw_to_account_id != nil {
		fields = append(fields, userwithdrawitem.FieldWithdrawToAccountID)
	}
	if m.amount != nil {
		fields = append(fields, userwithdrawitem.FieldAmount)
	}
	if m.platform_transaction_id != nil {
		fields = append(fields, userwithdrawitem.FieldPlatformTransactionID)
	}
	if m.withdraw_type != nil {
		fields = append(fields, userwithdrawitem.FieldWithdrawType)
	}
	if m.exempt_fee != nil {
		fields = append(fields, userwithdrawitem.FieldExemptFee)
	}
	if m.create_at != nil {
		fields = append(fields, userwithdrawitem.FieldCreateAt)
	}
	if m.update_at != nil {
		fields = append(fields, userwithdrawitem.FieldUpdateAt)
	}
	if m.delete_at != nil {
		fields = append(fields, userwithdrawitem.FieldDeleteAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserWithdrawItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userwithdrawitem.FieldAppID:
		return m.AppID()
	case userwithdrawitem.FieldUserID:
		return m.UserID()
	case userwithdrawitem.FieldCoinTypeID:
		return m.CoinTypeID()
	case userwithdrawitem.FieldWithdrawToAccountID:
		return m.WithdrawToAccountID()
	case userwithdrawitem.FieldAmount:
		return m.Amount()
	case userwithdrawitem.FieldPlatformTransactionID:
		return m.PlatformTransactionID()
	case userwithdrawitem.FieldWithdrawType:
		return m.WithdrawType()
	case userwithdrawitem.FieldExemptFee:
		return m.ExemptFee()
	case userwithdrawitem.FieldCreateAt:
		return m.CreateAt()
	case userwithdrawitem.FieldUpdateAt:
		return m.UpdateAt()
	case userwithdrawitem.FieldDeleteAt:
		return m.DeleteAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserWithdrawItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userwithdrawitem.FieldAppID:
		return m.OldAppID(ctx)
	case userwithdrawitem.FieldUserID:
		return m.OldUserID(ctx)
	case userwithdrawitem.FieldCoinTypeID:
		return m.OldCoinTypeID(ctx)
	case userwithdrawitem.FieldWithdrawToAccountID:
		return m.OldWithdrawToAccountID(ctx)
	case userwithdrawitem.FieldAmount:
		return m.OldAmount(ctx)
	case userwithdrawitem.FieldPlatformTransactionID:
		return m.OldPlatformTransactionID(ctx)
	case userwithdrawitem.FieldWithdrawType:
		return m.OldWithdrawType(ctx)
	case userwithdrawitem.FieldExemptFee:
		return m.OldExemptFee(ctx)
	case userwithdrawitem.FieldCreateAt:
		return m.OldCreateAt(ctx)
	case userwithdrawitem.FieldUpdateAt:
		return m.OldUpdateAt(ctx)
	case userwithdrawitem.FieldDeleteAt:
		return m.OldDeleteAt(ctx)
	}
	return nil, fmt.Errorf("unknown UserWithdrawItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserWithdrawItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userwithdrawitem.FieldAppID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case userwithdrawitem.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case userwithdrawitem.FieldCoinTypeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoinTypeID(v)
		return nil
	case userwithdrawitem.FieldWithdrawToAccountID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWithdrawToAccountID(v)
		return nil
	case userwithdrawitem.FieldAmount:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case userwithdrawitem.FieldPlatformTransactionID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatformTransactionID(v)
		return nil
	case userwithdrawitem.FieldWithdrawType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWithdrawType(v)
		return nil
	case userwithdrawitem.FieldExemptFee:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExemptFee(v)
		return nil
	case userwithdrawitem.FieldCreateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateAt(v)
		return nil
	case userwithdrawitem.FieldUpdateAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateAt(v)
		return nil
	case userwithdrawitem.FieldDeleteAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserWithdrawItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserWithdrawItemMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, userwithdrawitem.FieldAmount)
	}
	if m.addcreate_at != nil {
		fields = append(fields, userwithdrawitem.FieldCreateAt)
	}
	if m.addupdate_at != nil {
		fields = append(fields, userwithdrawitem.FieldUpdateAt)
	}
	if m.adddelete_at != nil {
		fields = append(fields, userwithdrawitem.FieldDeleteAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserWithdrawItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userwithdrawitem.FieldAmount:
		return m.AddedAmount()
	case userwithdrawitem.FieldCreateAt:
		return m.AddedCreateAt()
	case userwithdrawitem.FieldUpdateAt:
		return m.AddedUpdateAt()
	case userwithdrawitem.FieldDeleteAt:
		return m.AddedDeleteAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserWithdrawItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userwithdrawitem.FieldAmount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case userwithdrawitem.FieldCreateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateAt(v)
		return nil
	case userwithdrawitem.FieldUpdateAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdateAt(v)
		return nil
	case userwithdrawitem.FieldDeleteAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeleteAt(v)
		return nil
	}
	return fmt.Errorf("unknown UserWithdrawItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserWithdrawItemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserWithdrawItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserWithdrawItemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserWithdrawItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserWithdrawItemMutation) ResetField(name string) error {
	switch name {
	case userwithdrawitem.FieldAppID:
		m.ResetAppID()
		return nil
	case userwithdrawitem.FieldUserID:
		m.ResetUserID()
		return nil
	case userwithdrawitem.FieldCoinTypeID:
		m.ResetCoinTypeID()
		return nil
	case userwithdrawitem.FieldWithdrawToAccountID:
		m.ResetWithdrawToAccountID()
		return nil
	case userwithdrawitem.FieldAmount:
		m.ResetAmount()
		return nil
	case userwithdrawitem.FieldPlatformTransactionID:
		m.ResetPlatformTransactionID()
		return nil
	case userwithdrawitem.FieldWithdrawType:
		m.ResetWithdrawType()
		return nil
	case userwithdrawitem.FieldExemptFee:
		m.ResetExemptFee()
		return nil
	case userwithdrawitem.FieldCreateAt:
		m.ResetCreateAt()
		return nil
	case userwithdrawitem.FieldUpdateAt:
		m.ResetUpdateAt()
		return nil
	case userwithdrawitem.FieldDeleteAt:
		m.ResetDeleteAt()
		return nil
	}
	return fmt.Errorf("unknown UserWithdrawItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserWithdrawItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserWithdrawItemMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserWithdrawItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserWithdrawItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserWithdrawItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserWithdrawItemMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserWithdrawItemMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserWithdrawItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserWithdrawItemMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserWithdrawItem edge %s", name)
}
