// Code generated by ent, DO NOT EDIT.

package goodpayment

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/cloud-hashing-billing/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// GoodID applies equality check predicate on the "good_id" field. It's identical to GoodIDEQ.
func GoodID(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// PaymentCoinTypeID applies equality check predicate on the "payment_coin_type_id" field. It's identical to PaymentCoinTypeIDEQ.
func PaymentCoinTypeID(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentCoinTypeID), v))
	})
}

// AccountID applies equality check predicate on the "account_id" field. It's identical to AccountIDEQ.
func AccountID(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// Idle applies equality check predicate on the "idle" field. It's identical to IdleEQ.
func Idle(v bool) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdle), v))
	})
}

// OccupiedBy applies equality check predicate on the "occupied_by" field. It's identical to OccupiedByEQ.
func OccupiedBy(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOccupiedBy), v))
	})
}

// AvailableAt applies equality check predicate on the "available_at" field. It's identical to AvailableAtEQ.
func AvailableAt(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvailableAt), v))
	})
}

// CollectingTid applies equality check predicate on the "collecting_tid" field. It's identical to CollectingTidEQ.
func CollectingTid(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectingTid), v))
	})
}

// UsedFor applies equality check predicate on the "used_for" field. It's identical to UsedForEQ.
func UsedFor(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsedFor), v))
	})
}

// CreateAt applies equality check predicate on the "create_at" field. It's identical to CreateAtEQ.
func CreateAt(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// UpdateAt applies equality check predicate on the "update_at" field. It's identical to UpdateAtEQ.
func UpdateAt(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// DeleteAt applies equality check predicate on the "delete_at" field. It's identical to DeleteAtEQ.
func DeleteAt(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// GoodIDEQ applies the EQ predicate on the "good_id" field.
func GoodIDEQ(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodID), v))
	})
}

// GoodIDNEQ applies the NEQ predicate on the "good_id" field.
func GoodIDNEQ(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodID), v))
	})
}

// GoodIDIn applies the In predicate on the "good_id" field.
func GoodIDIn(vs ...uuid.UUID) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGoodID), v...))
	})
}

// GoodIDNotIn applies the NotIn predicate on the "good_id" field.
func GoodIDNotIn(vs ...uuid.UUID) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGoodID), v...))
	})
}

// GoodIDGT applies the GT predicate on the "good_id" field.
func GoodIDGT(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodID), v))
	})
}

// GoodIDGTE applies the GTE predicate on the "good_id" field.
func GoodIDGTE(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodID), v))
	})
}

// GoodIDLT applies the LT predicate on the "good_id" field.
func GoodIDLT(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodID), v))
	})
}

// GoodIDLTE applies the LTE predicate on the "good_id" field.
func GoodIDLTE(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodID), v))
	})
}

// PaymentCoinTypeIDEQ applies the EQ predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDEQ(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaymentCoinTypeID), v))
	})
}

// PaymentCoinTypeIDNEQ applies the NEQ predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDNEQ(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaymentCoinTypeID), v))
	})
}

// PaymentCoinTypeIDIn applies the In predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDIn(vs ...uuid.UUID) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPaymentCoinTypeID), v...))
	})
}

// PaymentCoinTypeIDNotIn applies the NotIn predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDNotIn(vs ...uuid.UUID) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPaymentCoinTypeID), v...))
	})
}

// PaymentCoinTypeIDGT applies the GT predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDGT(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaymentCoinTypeID), v))
	})
}

// PaymentCoinTypeIDGTE applies the GTE predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDGTE(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaymentCoinTypeID), v))
	})
}

// PaymentCoinTypeIDLT applies the LT predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDLT(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaymentCoinTypeID), v))
	})
}

// PaymentCoinTypeIDLTE applies the LTE predicate on the "payment_coin_type_id" field.
func PaymentCoinTypeIDLTE(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaymentCoinTypeID), v))
	})
}

// AccountIDEQ applies the EQ predicate on the "account_id" field.
func AccountIDEQ(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccountID), v))
	})
}

// AccountIDNEQ applies the NEQ predicate on the "account_id" field.
func AccountIDNEQ(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccountID), v))
	})
}

// AccountIDIn applies the In predicate on the "account_id" field.
func AccountIDIn(vs ...uuid.UUID) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAccountID), v...))
	})
}

// AccountIDNotIn applies the NotIn predicate on the "account_id" field.
func AccountIDNotIn(vs ...uuid.UUID) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAccountID), v...))
	})
}

// AccountIDGT applies the GT predicate on the "account_id" field.
func AccountIDGT(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAccountID), v))
	})
}

// AccountIDGTE applies the GTE predicate on the "account_id" field.
func AccountIDGTE(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAccountID), v))
	})
}

// AccountIDLT applies the LT predicate on the "account_id" field.
func AccountIDLT(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAccountID), v))
	})
}

// AccountIDLTE applies the LTE predicate on the "account_id" field.
func AccountIDLTE(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAccountID), v))
	})
}

// IdleEQ applies the EQ predicate on the "idle" field.
func IdleEQ(v bool) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdle), v))
	})
}

// IdleNEQ applies the NEQ predicate on the "idle" field.
func IdleNEQ(v bool) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIdle), v))
	})
}

// OccupiedByEQ applies the EQ predicate on the "occupied_by" field.
func OccupiedByEQ(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOccupiedBy), v))
	})
}

// OccupiedByNEQ applies the NEQ predicate on the "occupied_by" field.
func OccupiedByNEQ(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOccupiedBy), v))
	})
}

// OccupiedByIn applies the In predicate on the "occupied_by" field.
func OccupiedByIn(vs ...string) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOccupiedBy), v...))
	})
}

// OccupiedByNotIn applies the NotIn predicate on the "occupied_by" field.
func OccupiedByNotIn(vs ...string) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOccupiedBy), v...))
	})
}

// OccupiedByGT applies the GT predicate on the "occupied_by" field.
func OccupiedByGT(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOccupiedBy), v))
	})
}

// OccupiedByGTE applies the GTE predicate on the "occupied_by" field.
func OccupiedByGTE(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOccupiedBy), v))
	})
}

// OccupiedByLT applies the LT predicate on the "occupied_by" field.
func OccupiedByLT(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOccupiedBy), v))
	})
}

// OccupiedByLTE applies the LTE predicate on the "occupied_by" field.
func OccupiedByLTE(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOccupiedBy), v))
	})
}

// OccupiedByContains applies the Contains predicate on the "occupied_by" field.
func OccupiedByContains(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOccupiedBy), v))
	})
}

// OccupiedByHasPrefix applies the HasPrefix predicate on the "occupied_by" field.
func OccupiedByHasPrefix(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOccupiedBy), v))
	})
}

// OccupiedByHasSuffix applies the HasSuffix predicate on the "occupied_by" field.
func OccupiedByHasSuffix(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOccupiedBy), v))
	})
}

// OccupiedByEqualFold applies the EqualFold predicate on the "occupied_by" field.
func OccupiedByEqualFold(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOccupiedBy), v))
	})
}

// OccupiedByContainsFold applies the ContainsFold predicate on the "occupied_by" field.
func OccupiedByContainsFold(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOccupiedBy), v))
	})
}

// AvailableAtEQ applies the EQ predicate on the "available_at" field.
func AvailableAtEQ(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvailableAt), v))
	})
}

// AvailableAtNEQ applies the NEQ predicate on the "available_at" field.
func AvailableAtNEQ(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvailableAt), v))
	})
}

// AvailableAtIn applies the In predicate on the "available_at" field.
func AvailableAtIn(vs ...uint32) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAvailableAt), v...))
	})
}

// AvailableAtNotIn applies the NotIn predicate on the "available_at" field.
func AvailableAtNotIn(vs ...uint32) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAvailableAt), v...))
	})
}

// AvailableAtGT applies the GT predicate on the "available_at" field.
func AvailableAtGT(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvailableAt), v))
	})
}

// AvailableAtGTE applies the GTE predicate on the "available_at" field.
func AvailableAtGTE(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvailableAt), v))
	})
}

// AvailableAtLT applies the LT predicate on the "available_at" field.
func AvailableAtLT(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvailableAt), v))
	})
}

// AvailableAtLTE applies the LTE predicate on the "available_at" field.
func AvailableAtLTE(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvailableAt), v))
	})
}

// CollectingTidEQ applies the EQ predicate on the "collecting_tid" field.
func CollectingTidEQ(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectingTid), v))
	})
}

// CollectingTidNEQ applies the NEQ predicate on the "collecting_tid" field.
func CollectingTidNEQ(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCollectingTid), v))
	})
}

// CollectingTidIn applies the In predicate on the "collecting_tid" field.
func CollectingTidIn(vs ...uuid.UUID) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCollectingTid), v...))
	})
}

// CollectingTidNotIn applies the NotIn predicate on the "collecting_tid" field.
func CollectingTidNotIn(vs ...uuid.UUID) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCollectingTid), v...))
	})
}

// CollectingTidGT applies the GT predicate on the "collecting_tid" field.
func CollectingTidGT(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCollectingTid), v))
	})
}

// CollectingTidGTE applies the GTE predicate on the "collecting_tid" field.
func CollectingTidGTE(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCollectingTid), v))
	})
}

// CollectingTidLT applies the LT predicate on the "collecting_tid" field.
func CollectingTidLT(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCollectingTid), v))
	})
}

// CollectingTidLTE applies the LTE predicate on the "collecting_tid" field.
func CollectingTidLTE(v uuid.UUID) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCollectingTid), v))
	})
}

// CollectingTidIsNil applies the IsNil predicate on the "collecting_tid" field.
func CollectingTidIsNil() predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCollectingTid)))
	})
}

// CollectingTidNotNil applies the NotNil predicate on the "collecting_tid" field.
func CollectingTidNotNil() predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCollectingTid)))
	})
}

// UsedForEQ applies the EQ predicate on the "used_for" field.
func UsedForEQ(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsedFor), v))
	})
}

// UsedForNEQ applies the NEQ predicate on the "used_for" field.
func UsedForNEQ(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsedFor), v))
	})
}

// UsedForIn applies the In predicate on the "used_for" field.
func UsedForIn(vs ...string) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUsedFor), v...))
	})
}

// UsedForNotIn applies the NotIn predicate on the "used_for" field.
func UsedForNotIn(vs ...string) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUsedFor), v...))
	})
}

// UsedForGT applies the GT predicate on the "used_for" field.
func UsedForGT(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsedFor), v))
	})
}

// UsedForGTE applies the GTE predicate on the "used_for" field.
func UsedForGTE(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsedFor), v))
	})
}

// UsedForLT applies the LT predicate on the "used_for" field.
func UsedForLT(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsedFor), v))
	})
}

// UsedForLTE applies the LTE predicate on the "used_for" field.
func UsedForLTE(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsedFor), v))
	})
}

// UsedForContains applies the Contains predicate on the "used_for" field.
func UsedForContains(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsedFor), v))
	})
}

// UsedForHasPrefix applies the HasPrefix predicate on the "used_for" field.
func UsedForHasPrefix(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsedFor), v))
	})
}

// UsedForHasSuffix applies the HasSuffix predicate on the "used_for" field.
func UsedForHasSuffix(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsedFor), v))
	})
}

// UsedForIsNil applies the IsNil predicate on the "used_for" field.
func UsedForIsNil() predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUsedFor)))
	})
}

// UsedForNotNil applies the NotNil predicate on the "used_for" field.
func UsedForNotNil() predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUsedFor)))
	})
}

// UsedForEqualFold applies the EqualFold predicate on the "used_for" field.
func UsedForEqualFold(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsedFor), v))
	})
}

// UsedForContainsFold applies the ContainsFold predicate on the "used_for" field.
func UsedForContainsFold(v string) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsedFor), v))
	})
}

// CreateAtEQ applies the EQ predicate on the "create_at" field.
func CreateAtEQ(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtNEQ applies the NEQ predicate on the "create_at" field.
func CreateAtNEQ(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateAt), v))
	})
}

// CreateAtIn applies the In predicate on the "create_at" field.
func CreateAtIn(vs ...uint32) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateAt), v...))
	})
}

// CreateAtNotIn applies the NotIn predicate on the "create_at" field.
func CreateAtNotIn(vs ...uint32) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateAt), v...))
	})
}

// CreateAtGT applies the GT predicate on the "create_at" field.
func CreateAtGT(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateAt), v))
	})
}

// CreateAtGTE applies the GTE predicate on the "create_at" field.
func CreateAtGTE(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateAt), v))
	})
}

// CreateAtLT applies the LT predicate on the "create_at" field.
func CreateAtLT(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateAt), v))
	})
}

// CreateAtLTE applies the LTE predicate on the "create_at" field.
func CreateAtLTE(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateAt), v))
	})
}

// UpdateAtEQ applies the EQ predicate on the "update_at" field.
func UpdateAtEQ(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtNEQ applies the NEQ predicate on the "update_at" field.
func UpdateAtNEQ(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtIn applies the In predicate on the "update_at" field.
func UpdateAtIn(vs ...uint32) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtNotIn applies the NotIn predicate on the "update_at" field.
func UpdateAtNotIn(vs ...uint32) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateAt), v...))
	})
}

// UpdateAtGT applies the GT predicate on the "update_at" field.
func UpdateAtGT(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtGTE applies the GTE predicate on the "update_at" field.
func UpdateAtGTE(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLT applies the LT predicate on the "update_at" field.
func UpdateAtLT(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateAt), v))
	})
}

// UpdateAtLTE applies the LTE predicate on the "update_at" field.
func UpdateAtLTE(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateAt), v))
	})
}

// DeleteAtEQ applies the EQ predicate on the "delete_at" field.
func DeleteAtEQ(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtNEQ applies the NEQ predicate on the "delete_at" field.
func DeleteAtNEQ(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtIn applies the In predicate on the "delete_at" field.
func DeleteAtIn(vs ...uint32) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtNotIn applies the NotIn predicate on the "delete_at" field.
func DeleteAtNotIn(vs ...uint32) predicate.GoodPayment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GoodPayment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteAt), v...))
	})
}

// DeleteAtGT applies the GT predicate on the "delete_at" field.
func DeleteAtGT(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtGTE applies the GTE predicate on the "delete_at" field.
func DeleteAtGTE(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLT applies the LT predicate on the "delete_at" field.
func DeleteAtLT(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteAt), v))
	})
}

// DeleteAtLTE applies the LTE predicate on the "delete_at" field.
func DeleteAtLTE(v uint32) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GoodPayment) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GoodPayment) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GoodPayment) predicate.GoodPayment {
	return predicate.GoodPayment(func(s *sql.Selector) {
		p(s.Not())
	})
}
